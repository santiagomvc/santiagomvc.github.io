<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>SMVC Notes</title>
<link>https://santiagomvc.github.io/</link>
<atom:link href="https://santiagomvc.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Notes from building Machine Learning solutions in the wild</description>
<generator>quarto-1.6.32</generator>
<lastBuildDate>Sun, 03 Nov 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Notes on Anthropic &amp; Menlo Builder Day</title>
  <dc:creator>Santiago Velez</dc:creator>
  <link>https://santiagomvc.github.io/posts/anthropic_builder_day_02112024/anthropic_builder_day_02112024.html</link>
  <description><![CDATA[ 





<p>Anthropic/Menlo Builder Day was a one day event set on November 2 2024, focused mainly on sharing updates on Anthropic new developments, and encouraging Claude applications with a 4 hours hackathon. Here are my lightly edited notes on the event.</p>
<section id="dario-fireside-chat" class="level2">
<h2 class="anchored" data-anchor-id="dario-fireside-chat">Dario Fireside Chat</h2>
<ul>
<li>Driven by the question of intelligence</li>
<li>Scaling is extremely valuable</li>
<li>Text is easy to scale (lots of data, self supervised)</li>
<li>Simple for RLFH too</li>
<li>Alignment work is stronger in Anthropic (constitutional ai, interpretability)
<ul>
<li><em>Personal observation:</em> Claude’s frontier models seem to have better meta understanding than other models. A few examples I have seen are better developer jokes, identifying the “needle in haystack” test, stop responses after a cycle of repeated inputs, etc.</li>
</ul></li>
<li>Talent density is the most important factor</li>
<li>Speed-size-quality trade off for models</li>
<li>Models should be general purpose</li>
<li>The bigger model the more steerable</li>
<li>Model personality is important for final user, more art than science</li>
<li>Models should take actions (agents, ex: email legislators)</li>
<li>Agents in the world have more range to do harm than regular chatbots</li>
<li>Claude compute use still has some issues</li>
<li>Code models will advance faster because they don’t need humans in the loop
<ul>
<li><em>Personal observation:</em> Is there a path to improve system 2 reasoning there?</li>
</ul></li>
<li>Workforce, legal, biomedicine software will grow faster</li>
<li>Startups are exponential work, AI startups’ exponential grows quicker</li>
<li>Hard to know which advise to follow since current AI startups are different from previous types of startups</li>
<li>Models will continue to be expensive (no room for more than 3 foundation models general companies), lots of companies for smaller and more specific models.</li>
<li><a href="https://darioamodei.com/machines-of-loving-grace">Machines of Loving Grace</a>:
<ul>
<li>Biology improvements, healthcare, etc.</li>
<li>Defending the country and its ideals</li>
<li>Worry about the intentional bad use of the models</li>
</ul></li>
<li>500k context window for enterprise customers</li>
<li>Extending the model context AND having the model perform well with the complete context is hard</li>
<li>Asking models to write more succinctly usually reduces the quality of the response
<ul>
<li><em>Personal observation:</em> I have seen this myself, models usually “think” by writing</li>
</ul></li>
<li>Models are able to identify and respond to what users want to hear, instead of what it may be a more accurate answer. LMSys may be biased due to “People Pleasing”</li>
<li>Core models should be as good as possible, but there can be differenciation within that range
<ul>
<li><em>Personal observation:</em> What about the ARC challenge?</li>
</ul></li>
</ul>
</section>
<section id="anthropic-api-technical-deep-dive" class="level2">
<h2 class="anchored" data-anchor-id="anthropic-api-technical-deep-dive">Anthropic API Technical Deep Dive</h2>
<ul>
<li>Upgraded 3.5 Sonnet
<ul>
<li>State of the art on coding</li>
</ul></li>
<li>3.5 Haiku coming soon</li>
<li>Computer use
<ul>
<li>Use apps, create docs, etc.</li>
<li>Useful for developer unfriendly tasks
<ul>
<li><em>Personal observation:</em> Web scrapers?</li>
</ul></li>
<li>Public data and guide available, use through the api</li>
<li>There are prompting tips and techniques to constrain behavior and increase speed (like caching)</li>
<li>It’s a subset of tool use</li>
<li>Limitations
<ul>
<li>Latency</li>
<li>Accuracy, specially on complex tasks</li>
<li>Scrolling is unreliable</li>
<li>Spreadsheets</li>
<li>Account creations</li>
<li>Captchas (intentionally hard)</li>
<li>Vulnerabilities (prompt injection)</li>
</ul></li>
<li>Prompting tips
<ul>
<li>Limit to simple well defined tasks</li>
<li>Confirm output success</li>
</ul></li>
</ul></li>
<li>Prompting recommendations
<ul>
<li>Develop test cases</li>
<li>Engineer preliminary prompts and iterate</li>
</ul></li>
<li>Workbench
<ul>
<li>Supports variables</li>
<li>Improves initial prompts</li>
<li>Support for building evaluation sets</li>
<li><em>Personal observation:</em> How useful is it, are there any metrics?</li>
</ul></li>
<li>What’s next
<ul>
<li>Customize performance, improve latency, etc.</li>
<li>Interpretability</li>
<li>Alignment</li>
<li>Pre-training
<ul>
<li>Improve vision compared to text capabilities</li>
</ul></li>
<li>Enhancing retrieval</li>
<li>Agents and orchestration</li>
</ul></li>
<li>They take Claude docs seriously</li>
</ul>
</section>
<section id="anthropicmenlo-anthology-fund" class="level2">
<h2 class="anchored" data-anchor-id="anthropicmenlo-anthology-fund">Anthropic/Menlo Anthology Fund</h2>
<ul>
<li>100M to invest in AI companies</li>
<li>Mention you were at Builder Day</li>
</ul>
</section>
<section id="hackathon-development-guidelines" class="level2">
<h2 class="anchored" data-anchor-id="hackathon-development-guidelines">Hackathon Development Guidelines</h2>
<ul>
<li>4 hours of time</li>
<li>Ideally should have started the project before</li>
<li>Individuals or group of 3</li>
<li>Multi pass judge</li>
<li>Criteria
<ul>
<li>Creative</li>
<li>Improves work productivity</li>
<li>Potential for social good</li>
</ul></li>
<li>5 pm prejudging
<ul>
<li>5 min per project</li>
</ul></li>
<li>Prizes
<ul>
<li>First
<ul>
<li>10k cash</li>
<li>50k Anthropic credits</li>
<li>50k AWS credits</li>
</ul></li>
<li>Second</li>
<li>Third</li>
</ul></li>
</ul>
</section>
<section id="research-breakthroughs-in-interpretability" class="level2">
<h2 class="anchored" data-anchor-id="research-breakthroughs-in-interpretability">Research Breakthroughs in Interpretability</h2>
<p>Probably the best talk of the day, but did not take notes because it was during development time.</p>
<ul>
<li>Superposition hypothesis: Models represent many more sparse, interpretable variables than they have features. More information can be found <a href="https://www.anthropic.com/research/mapping-mind-language-model">here</a></li>
<li><a href="https://www.anthropic.com/news/golden-gate-claude">Golden Gate Claude</a> is an application of these ideas</li>
<li>There are many hidden variables that the research team has not yet discovered</li>
</ul>
</section>
<section id="hackathon-project" class="level2">
<h2 class="anchored" data-anchor-id="hackathon-project">Hackathon Project</h2>
<p>Using previous work on public policy and bill summaries, I built a web app that receives a jurisdictions and a legislator, and returns the legislator informations, vote history with bill summaries, and a report on the vote history. Though the demo is down for now, here’s a gif for reference:</p>
<p><img src="https://santiagomvc.github.io/posts/anthropic_builder_day_02112024/public_policy_app.gif" class="img-fluid"></p>
</section>
<section id="awards" class="level2">
<h2 class="anchored" data-anchor-id="awards">Awards</h2>
<ol type="1">
<li>Robot arm piloting with Claude</li>
<li>Building new captchas in the age of AI
<ul>
<li><em>Personal observation:</em> Pretty smart and creative, my favorite of the 3</li>
</ul></li>
<li>Improving PRDs with custom personas powered by Claude</li>
</ol>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Overall it was a fun event with some really interesting talks. My main complain is that one day is not enough for multiple interesting talks and demo development (almost) from scratch, so either focusing on one or having multiple days would a be good idea.</p>


</section>

 ]]></description>
  <category>ai</category>
  <category>lm</category>
  <category>anthropic</category>
  <category>claude</category>
  <category>menlo</category>
  <category>events</category>
  <category>hackathon</category>
  <guid>https://santiagomvc.github.io/posts/anthropic_builder_day_02112024/anthropic_builder_day_02112024.html</guid>
  <pubDate>Sun, 03 Nov 2024 05:00:00 GMT</pubDate>
  <media:content url="https://santiagomvc.github.io/posts/anthropic_builder_day_02112024/thumbnail.png" medium="image" type="image/png" height="104" width="144"/>
</item>
<item>
  <title>ML Practice: Building Features</title>
  <dc:creator>Santiago Velez</dc:creator>
  <link>https://santiagomvc.github.io/posts/ml_practice_building_features/ml_practice_building_features.html</link>
  <description><![CDATA[ 





<p><em>This post shares some of the learnings from building ML practices at tech companies. Each organization is different, so take everything with a pinch of salt.</em></p>
<p>Business problems should be solved in the simplest way possible, but not simpler. The process of analyzing and modeling data is frequently complex since it requires interdisciplinary work, historical data (usually in large amounts), and specialized algorithmic knowledge to tackle open-ended problems that may not have a solution. As a result, model training should be used in cases where traditional business rules and domain expertise come short. Simple heuristics can go a long way, especially in issues never addressed before. Though there are common business problems and existing solutions, most ML features will go through an experimental phase due to quirks in the data and specifics in the problem.</p>
<section id="business-features-and-ml" class="level2">
<h2 class="anchored" data-anchor-id="business-features-and-ml">Business features and ML</h2>
<p>There’s no single way to separate ML (DS, AI, etc.) from other engineering work. Nevertheless, here are some ideas that can be used to identify problems best suited for ML:</p>
<ul>
<li>Unstructured data problems with existing ML solutions (ex: Face recognition, Voice to Text translation, Short Text Summarization).</li>
<li>Unstructured data problems commonly solved by training ML models (Text classification, custom image classification).</li>
<li>Problems commonly solved with statistical models (Uplift modeling, multi-armed bandits, survival analysis).</li>
<li>Structured classification and regression problems commonly solved with ML (Churn detection, sales forecasts).</li>
<li>Industry-specific problems with imperfect solutions (Tumor detection, bill summarization, weather forecasting).</li>
</ul>
<p>Even if a problem matches one of the categories above, it may not be fixable at the moment. Some possible reasons are:</p>
<ul>
<li>The problem’s nature makes it hard to solve through existing methods (ex: predicting stocks, and weather).</li>
<li>Business rules or domain expertise works sufficiently well.</li>
<li>There’s no clear reason why a data-based approach may improve current performance.</li>
<li>Not enough quality data available.</li>
<li>Very low to no margin of error (autonomous weapons).</li>
<li>Deep domain expertise is required and not available (Public Policy, Medical Imaging).</li>
<li>Specialized technical knowledge is required and not available (Reinforcement Learning, Distributed Learning).</li>
<li>The infrastructure required is not available or affordable (Large GPU training clusters, Large inference clusters).</li>
</ul>
<p>Before starting ML development to build a business feature, here are some useful questions to ask:</p>
<ul>
<li>Why should this problem be solved with a data-based approach?</li>
<li>What data could be used to solve this issue?</li>
<li>Do we have the data to try to solve this issue?</li>
<li>Can the data be trusted?</li>
<li>When and how is the data updated?</li>
<li>What is the process to get the required data?</li>
<li>What family of models is best suited to solve this issue?</li>
<li>How much data do I have for modeling/analysis?</li>
<li>What metrics should I use?</li>
<li>How is the data distribution changing over time?</li>
<li>How does the existing research approach the problem?</li>
</ul>
</section>
<section id="ml-lifecycle-frameworks" class="level2">
<h2 class="anchored" data-anchor-id="ml-lifecycle-frameworks">ML Lifecycle Frameworks</h2>
<p>The increased uncertainty in ML projects makes quick iteration and user validation even more relevant. There are multiple frameworks proposed to manage the Data Science and Machine Learning lifecycle. Though we won’t explain them in detail, some of them are:</p>
<section id="knowledge-discovery-in-databases-kdd" class="level3">
<h3 class="anchored" data-anchor-id="knowledge-discovery-in-databases-kdd">Knowledge Discovery in Databases (KDD)</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://infovis-wiki.net/w/images/4/4d/Fayyad96kdd-process.png" class="img-fluid figure-img"></p>
<figcaption>KDD</figcaption>
</figure>
</div>
<p><a href="https://www.sciencedirect.com/topics/computer-science/knowledge-discovery-in-database">https://www.sciencedirect.com/topics/computer-science/knowledge-discovery-in-database</a></p>
</section>
<section id="cross-industry-standard-process-for-data-mining-crisp-dm" class="level3">
<h3 class="anchored" data-anchor-id="cross-industry-standard-process-for-data-mining-crisp-dm">Cross Industry Standard Process for Data Mining (CRISP-DM)</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/CRISP-DM_Process_Diagram.png/1920px-CRISP-DM_Process_Diagram.png" class="img-fluid figure-img"></p>
<figcaption>CRISP DM</figcaption>
</figure>
</div>
<p><a href="https://en.wikipedia.org/wiki/Cross-industry_standard_process_for_data_mining">https://en.wikipedia.org/wiki/Cross-industry_standard_process_for_data_mining</a></p>
</section>
<section id="team-data-science-process-tdsp" class="level3">
<h3 class="anchored" data-anchor-id="team-data-science-process-tdsp">Team Data Science Process (TDSP)</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://learn.microsoft.com/en-us/azure/architecture/data-science-process/media/overview/tdsp-lifecycle2.png" class="img-fluid figure-img"></p>
<figcaption>TDSP</figcaption>
</figure>
</div>
<p><a href="https://learn.microsoft.com/en-us/azure/architecture/data-science-process/overview">https://learn.microsoft.com/en-us/azure/architecture/data-science-process/overview</a></p>
</section>
<section id="common-patterns-in-ml-lifecycle-frameworks" class="level3">
<h3 class="anchored" data-anchor-id="common-patterns-in-ml-lifecycle-frameworks">Common Patterns in ML Lifecycle Frameworks</h3>
<ul>
<li>Business understanding is usually the starting point.</li>
<li>Data analysis and transformations are very important.</li>
<li>There’s always continual iteration between modeling and deployment.</li>
<li>Metrics and evaluations enable improvements in the cycle.</li>
</ul>
</section>
</section>
<section id="ml-feature-development" class="level2">
<h2 class="anchored" data-anchor-id="ml-feature-development">ML Feature Development</h2>
<p>Developing ML features can be divided into continual iterations of four steps, three required and one optional depending on the specific project:</p>
<ul>
<li>Experimentation</li>
<li>Evaluation</li>
<li>Deployment</li>
<li><em>Integration</em></li>
</ul>
<p>Some features will require additional work from external teams (DE, Web developers) to be used. Though it’s not the ML team’s direct responsibility, if it fails the feature won’t reach the final user. That’s why <em>Integration</em> is included as part of the cycle.</p>
<p>Iterating through this process as soon as possible allows us to gather user feedback and reduce uncertainty. However, minimal requirements are needed to develop ML safely and effectively.</p>
<section id="requirements-before-the-initial-iteration" class="level3">
<h3 class="anchored" data-anchor-id="requirements-before-the-initial-iteration">Requirements before the initial iteration</h3>
<ul>
<li>Business problem description</li>
<li>Sample of input data</li>
<li>Sample of labeled data (if required)</li>
<li>Expected deployment pattern</li>
<li>Expected integration plan</li>
<li>Measurable success criteria</li>
<li>Implemented baseline metrics (if possible)</li>
<li>Defined usage metrics (with direct or indirect feedback)</li>
<li>Defined model metrics
<ul>
<li>First deployment threshold</li>
<li>Final deployment threshold (proposed)</li>
</ul></li>
</ul>
</section>
<section id="requirements-to-close-the-initial-iteration" class="level3">
<h3 class="anchored" data-anchor-id="requirements-to-close-the-initial-iteration">Requirements to close the initial iteration</h3>
<ul>
<li>Deployment threshold met</li>
<li>Replicable experimental code</li>
<li>Basic deployment code</li>
<li>Basic integration code (if required)</li>
<li>Modular deployment/integration to allow quick model changes</li>
<li>Usage metrics collection implemented</li>
</ul>
</section>
<section id="requirements-to-close-the-final-iteration" class="level3">
<h3 class="anchored" data-anchor-id="requirements-to-close-the-final-iteration">Requirements to close the final iteration</h3>
<ul>
<li>Production-ready training and inference code with tests</li>
<li>Final deployment metrics met</li>
<li>Complete input data available</li>
<li>Success metrics collection implemented (if required)</li>
<li>Data drift metrics implemented</li>
</ul>
<p>Though this may be the final part of an active ML development, as long as the model is in production some evaluation metrics should be required.</p>
</section>
<section id="common-issues-to-avoid" class="level3">
<h3 class="anchored" data-anchor-id="common-issues-to-avoid">Common issues to avoid</h3>
<ul>
<li>No integration resources are available for the project</li>
<li>Very short projects with a single iteration</li>
</ul>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://www.ibm.com/docs/en/spss-modeler/saas?topic=dm-crisp-help-overview">https://www.ibm.com/docs/en/spss-modeler/saas?topic=dm-crisp-help-overview</a></li>
<li><a href="https://link.springer.com/chapter/10.1007/978-1-4471-0351-6_12">https://link.springer.com/chapter/10.1007/978-1-4471-0351-6_12</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/architecture/data-science-process/overview">https://learn.microsoft.com/en-us/azure/architecture/data-science-process/overview</a></li>
<li><a href="https://martin.zinkevich.org/rules_of_ml/rules_of_ml.pdf">https://martin.zinkevich.org/rules_of_ml/rules_of_ml.pdf</a></li>
</ul>


</section>

 ]]></description>
  <category>ml_practice</category>
  <category>ml</category>
  <category>ai</category>
  <category>features</category>
  <category>business</category>
  <guid>https://santiagomvc.github.io/posts/ml_practice_building_features/ml_practice_building_features.html</guid>
  <pubDate>Sat, 28 Sep 2024 05:00:00 GMT</pubDate>
  <media:content url="https://santiagomvc.github.io/posts/ml_practice_building_features/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Intro to Entity Matching</title>
  <dc:creator>Santiago Velez</dc:creator>
  <link>https://santiagomvc.github.io/posts/entity_matching_intro/entity_matching_intro.html</link>
  <description><![CDATA[ 





<p>Entity matching is the process of identifying entity descriptions from different sources that refer to the same real-world entity. This post is an applied introduction to some common approaches used for entity matching. Since even for small datasets the number of possible matches can become excessive, the process is usually split in two:</p>
<ul>
<li><p><strong>Blocking</strong>: Generates the possible combinations and removes most of them based on simple metrics (ex: number of shared letters)</p></li>
<li><p><strong>Disambiguation</strong>: Evaluates the likelihood that two entity descriptions refer to the same real-world entity. For Entity Disambiguation, the approaches can be split into the following categories:</p>
<ul>
<li>Prompting trained Large Language Models</li>
<li>Bert-like Language Models Fine Tuned on Entity Tasks</li>
<li>Similarity Metrics and traditional ML Models</li>
<li>Rule systems developed by human experts</li>
</ul></li>
</ul>
<p>There are multiple tasks related to Entity Matching. Though they are different, some approaches may solve common issues.</p>
<ul>
<li><strong>Entity Disambiguation</strong>: Evaluates the likelihood that two entity descriptions refer to the same real-world entity. Does not include the candidate generation and blocking process.</li>
<li><strong>Entity Linking</strong>: Identifies characters in a text that match an entity in an existing Knowledge Base.</li>
<li><strong>Named Entity Recognition</strong>: Identifies characters in a text that could be identified as Named Entities. Some of them also use Knowledge Bases or Disambiguation.</li>
</ul>
<p><strong>TL;DR</strong>: This paragraph in “Entity Matching using Large Language Models” is a good summary of the current status of Entity Matching in 2024:</p>
<p><em>“We can summarize the high-level implications of our findings concerning the selection of matching techniques in the following rules of thumb: For use cases that do not involve many unseen entities and for which a decent amount of training data is available, PLM-based matchers are a suitable option which does not require much compute due to the smaller size of the models. For use cases that involve a relevant amount of unseen entities and for which it is costly to gather and maintain a decent size training set, LLM-based matchers should be preferred due to their high zero-shot performance and ability to generalize to unseen entities. If using the best performing hosted LLMs is not an option due to their high usage costs, fine-tuning a cheaper hosted model is an alternative that can deliver a similar F1 performance. If using using hosted models is no option due to privacy concerns, using an open-source LLM on local hardware can be an alternative providing a slightly lower F1 performance given that some task-specific training data or domain-specific matching rules are available.”</em></p>
<p><em>Ralph Peeters &amp; Christian Bizer, <a href="https://arxiv.org/pdf/2310.11244">“Entity Matching using Large Language Models”</a>, 2024</em></p>
<p>A more detailed explanation of Entity Matching can be found <a href="http://anhaidgroup.github.io/py_entitymatching/v0.4.0/user_manual/overview.html">here</a></p>
<section id="when-to-use-ai-for-entity-matching" class="level2">
<h2 class="anchored" data-anchor-id="when-to-use-ai-for-entity-matching">When to use AI for Entity Matching</h2>
<ul>
<li>If a human can find a match with the presented data, is likely that a Modern AI approach can do it too</li>
<li>If a human is having issues finding a match, AI won’t be likely to help</li>
<li>If there’s not enough information presented to the model, AI won’t be able to find the match, even if a human has enough internal information to do it</li>
</ul>
<p>You can run the following code on Google Colab clicking here.</p>
<p><a target="_blank" href="https://colab.research.google.com/github/santiagomvc/santiagomvc.github.io/blob/main/posts/entity_matching_intro/entity_matching_intro.ipynb"> <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"> </a></p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Downloading required libraries and packages</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install transformers spacy numpy scipy py_entitymatching python<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dotenv openai</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Downloading spacy english package</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m spacy download en_core_web_sm</span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating data for training/few-shot and evaluation</span></span>
<span id="cb3-2">synt_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb3-3">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John A. Smith"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John A. Smith"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-4">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Emily J. Clarke"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Emily T. Clarke"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>},</span>
<span id="cb3-5">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sarah M. Johnson"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sarah Marie Johnson"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"James P. Miller"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"James P. Miles"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>},</span>
<span id="cb3-7">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Michael O'Leary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Michael OLeary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-8">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nancy L. Wright"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nancy W. Wright"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>},</span>
<span id="cb3-9">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Catherine G. Davis"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Catherine Grace Davis"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-10">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Richard A. Lee"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Richard A. Lin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>},</span>
<span id="cb3-11">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Robert K. Brown"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Robert K. Brown Jr."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-12">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Karen M. Harris"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Karen M. Harrison"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>},</span>
<span id="cb3-13">]</span>
<span id="cb3-14"></span>
<span id="cb3-15">real_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb3-16">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spann-Wilder, Tiffany"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiffany Spann-Wilder"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-17">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Landon C. Dais"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Landon Dais"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-18">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Giglio JA"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jodi Giglio"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-19">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brown, M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marla Gallo Brown"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-20">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chamber_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"house"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"J.T. 'Jabo' Waggoner  "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jabo Waggoner"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>},</span>
<span id="cb3-21">]</span></code></pre></div>
</div>
</section>
<section id="language-models" class="level2">
<h2 class="anchored" data-anchor-id="language-models">Language Models</h2>
<p>Currently the best performing approach to Entity Disambiguation based on <a href="https://arxiv.org/pdf/2310.11244">recent research</a>. It usually consists of building a set of examples and assembling a prompt, in order to pass an unseen pair to the Language Model and get the relevant response. There’s some exploration into using LM to enhance existing Entity Linking models.</p>
<section id="advantages" class="level3">
<h3 class="anchored" data-anchor-id="advantages">Advantages</h3>
<ul>
<li>Easy to use: create examples, compose a prompt, call an API, and parse the results.</li>
<li>Performance above older models trained specifically for entity matching</li>
<li>May not require structuring the data as much as other options, just collapsing all the information in a single string.</li>
<li>LM approach can be used to generate explanations and categories. Categories can be used to find common error cases (year, mixed words, etc.)</li>
</ul>
</section>
<section id="disadvantages" class="level3">
<h3 class="anchored" data-anchor-id="disadvantages">Disadvantages</h3>
<ul>
<li>Prompting is very sensible to changes</li>
<li>Most powerful models are paid or hard to use</li>
<li>No candidate generation and blocking (can be done with other tools)</li>
</ul>
</section>
<section id="best-lm-configuration---based-on-entity-matching-using-lms" class="level3">
<h3 class="anchored" data-anchor-id="best-lm-configuration---based-on-entity-matching-using-lms">Best LM Configuration - based on <a href="(https://arxiv.org/pdf/2310.11244)"><em>Entity Matching using LMs</em></a>:</h3>
<ul>
<li>Model: GPT4</li>
<li>Prompt: Domain specific, complex prompt, free-form response (use regex to find ‘yes’)</li>
<li>Few Shot: Yes, related examples</li>
<li>Fine-tuning helps, especially smaller models, without losing generalization</li>
</ul>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading libraries</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading env and openai client</span></span>
<span id="cb4-6">load_dotenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".env"</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an ENV file with OPENAI_API_KEY</span></span>
<span id="cb4-7">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAI()</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Building prompts for few shot learning</span></span>
<span id="cb4-10">task_description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do the two legislator names refer to the same real-world legislator?"</span></span>
<span id="cb4-11">demostration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legislator_1: '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{entity_1}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">legislator_2: '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{entity_2}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span></span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating examples for few shot learning</span></span>
<span id="cb5-2">few_shot_messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># System Prompt</span></span>
<span id="cb5-4">few_shot_messages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant."</span>})</span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Few shot Examples</span></span>
<span id="cb5-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> example <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> synt_data:</span>
<span id="cb5-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adds description</span></span>
<span id="cb5-8">    few_shot_messages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: task_description})</span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adds example</span></span>
<span id="cb5-10">    few_shot_messages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: demostration.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(entity_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>], entity_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>])})</span>
<span id="cb5-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adds correct answer</span></span>
<span id="cb5-12">    few_shot_messages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assistant"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>]})</span></code></pre></div>
</div>
<div id="cell-10" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Running the model for each real example</span></span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> real_data:</span>
<span id="cb6-3">  messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> few_shot_messages.copy()</span>
<span id="cb6-4">  messages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: task_description})</span>
<span id="cb6-5">  messages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: demostration.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(entity_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>], entity_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>])})</span>
<span id="cb6-6">  response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb6-7">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4o"</span>,</span>
<span id="cb6-8">    messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages,</span>
<span id="cb6-9">  )</span>
<span id="cb6-10">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Entity 1: "</span>, sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_1"</span>])</span>
<span id="cb6-11">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Entity 2: "</span>, sample[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"entity_2"</span>])</span>
<span id="cb6-12">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Same Entity: "</span>, response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Entity 1:  Spann-Wilder, Tiffany
Entity 2:  Tiffany Spann-Wilder
Same Entity:  yes
Entity 1:  Landon C. Dais
Entity 2:  Landon Dais
Same Entity:  yes
Entity 1:  Giglio JA
Entity 2:  Jodi Giglio
Same Entity:  No, the two names 'Giglio JA' and 'Jodi Giglio' do not seem to refer to the same real-world legislator. 'Giglio JA' is likely an abbreviation or a format that includes initials, and 'Jodi Giglio' is a full name. Without additional context, they are likely different individuals.
Entity 1:  Brown, M
Entity 2:  Marla Gallo Brown
Same Entity:  no
Entity 1:  J.T. 'Jabo' Waggoner 
Entity 2:  Jabo Waggoner
Same Entity:  yes</code></pre>
</div>
</div>
</section>
</section>
<section id="bert-type-models-fine-tuned-for-entity-tasks" class="level2">
<h2 class="anchored" data-anchor-id="bert-type-models-fine-tuned-for-entity-tasks">Bert-type Models Fine Tuned for Entity Tasks</h2>
<p>Older and smaller generation of Language Models, trained with general data but fine-tuned for entity tasks. Though some are trained for other tasks, most are trained for entity linking, which requires defining a Trie or Knowledge Base (usually WikiData). Changing the KB may require retraining the model</p>
<section id="advantages-1" class="level3">
<h3 class="anchored" data-anchor-id="advantages-1">Advantages</h3>
<ul>
<li>The Blocking process is performed automatically for the existing Trie/Knowledge Base</li>
<li>Good performance for data within training distribution</li>
<li>May not require additional training (depending on the model)</li>
<li>You can run it locally at no cost</li>
</ul>
</section>
<section id="disadvantages-1" class="level3">
<h3 class="anchored" data-anchor-id="disadvantages-1">Disadvantages</h3>
<ul>
<li>Hard to train from scratch, which is recommended if data is out of distribution</li>
<li>Limited Out of Distribution performance out of the box</li>
<li>Need to build a custom TRIE/KB or use generic KBs like WikiData</li>
</ul>
</section>
<section id="recommended-models" class="level3">
<h3 class="anchored" data-anchor-id="recommended-models">Recommended Models</h3>
<ul>
<li><a href="https://github.com/facebookresearch/GENRE">Facebook GENRE</a></li>
</ul>
</section>
<section id="facebook-genre-using-genre-default-trie" class="level3">
<h3 class="anchored" data-anchor-id="facebook-genre-using-genre-default-trie">Facebook Genre (Using Genre default Trie)</h3>
<div id="cell-13" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading libraries</span></span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModelForSeq2SeqLM</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading model and tokenizers</span></span>
<span id="cb8-5">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facebook/genre-linking-aidayago2"</span>)</span>
<span id="cb8-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSeq2SeqLM.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facebook/genre-linking-aidayago2"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Processing text</span></span>
<span id="cb8-9">sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> example <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> real_data:</span>
<span id="cb8-11">    sentences.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[START_ENT] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_1'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> [END_ENT]"</span>)</span>
<span id="cb8-12">    sentences.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[START_ENT] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_2'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> [END_ENT]"</span>)</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Running inference</span></span>
<span id="cb8-15">num_beams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-16">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.generate(</span>
<span id="cb8-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>tokenizer(</span>
<span id="cb8-18">        sentences, </span>
<span id="cb8-19">        return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>, </span>
<span id="cb8-20">        padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb8-21">        truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-22">    ),</span>
<span id="cb8-23">    num_beams<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_beams,</span>
<span id="cb8-24">    num_return_sequences<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_beams,</span>
<span id="cb8-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OPTIONAL: use constrained beam search</span></span>
<span id="cb8-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prefix_allowed_tokens_fn=lambda batch_id, sent: trie.get(sent.tolist()),</span></span>
<span id="cb8-27">)</span>
<span id="cb8-28">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.batch_decode(outputs, skip_special_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-29"></span>
<span id="cb8-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Printing results</span></span>
<span id="cb8-31">i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> example <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> real_data:</span>
<span id="cb8-33">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Entity 1: "</span>, example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_1'</span>])</span>
<span id="cb8-34">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Entity 1 KB Candidates: "</span>, preds[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>num_beams])</span>
<span id="cb8-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Entity 2: "</span>, example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_2'</span>])</span>
<span id="cb8-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Entity 2 KB Candidates: "</span>, preds[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>num_beams:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(num_beams<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)])</span>
<span id="cb8-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb8-38">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(num_beams<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/exp/lib/python3.10/site-packages/transformers/generation/utils.py:1168: UserWarning: Using the model-agnostic default `max_length` (=20) to control the generation length. We recommend setting `max_new_tokens` to control the maximum length of the generation.
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Entity 1:  Spann-Wilder, Tiffany
Entity 1 KB Candidates:  ['Tiffany Spann-Wilder', 'Spann-Wilder, Tiffany', 'Tiffany Spann-Wilder, Tiffany']
Entity 2:  Tiffany Spann-Wilder
Entity 2 KB Candidates:  ['Tiffany Spann-Wilder', 'Tiffany Spann- Wilder', 'Tiffani Spann-Wilder']
--
Entity 1:  Landon C. Dais
Entity 1 KB Candidates:  ['Landon C. Dais', 'Landon Dais', 'Landon C.Dais']
Entity 2:  Landon Dais
Entity 2 KB Candidates:  ['Landon Dais', 'LandonDais', 'Landon dais']
--
Entity 1:  Giglio JA
Entity 1 KB Candidates:  ['Juan Antonio Giglio', 'Antonio Giglio', 'Jorge Antonio Giglio']
Entity 2:  Jodi Giglio
Entity 2 KB Candidates:  ['Jodi Giglio', 'Jodi Giglio (actress)', 'Jodi Giglio (singer)']
--
Entity 1:  Brown, M
Entity 1 KB Candidates:  ['Mark Brown (American football)', 'Michael J. Brown', 'Michael Brown (American football)']
Entity 2:  Marla Gallo Brown
Entity 2 KB Candidates:  ['Marla Gallo Brown', 'Marla Gallo-Brown', 'Marla Gallo']
--
Entity 1:  J.T. 'Jabo' Waggoner 
Entity 1 KB Candidates:  ['J. T. Waggoner', "J. T. 'Jabo' Waggoner", 'Jabo Waggoner']
Entity 2:  Jabo Waggoner
Entity 2 KB Candidates:  ['Jabo Waggoner', 'Jabo Waggoner', 'Jambo Waggoner']
--</code></pre>
</div>
</div>
</section>
</section>
<section id="matching-systems-with-small-to-no-training" class="level2">
<h2 class="anchored" data-anchor-id="matching-systems-with-small-to-no-training">Matching systems with Small to No Training</h2>
<p>This group encompasses traditional Entity Matching techniques that use similarity metrics or classic ML models to evaluate how likely are the entities to match. Some of these approaches will require labeled examples to train models, though training is mostly managed by the library. This approach is popular for tabular datasets with multiple attributes</p>
<section id="advantages-2" class="level3">
<h3 class="anchored" data-anchor-id="advantages-2">Advantages</h3>
<ul>
<li>Simpler matching algorithms (though libraries can be outdated)</li>
<li>Usually includes candidate generation and blocking</li>
<li>Fast</li>
</ul>
</section>
<section id="disadvantages-2" class="level3">
<h3 class="anchored" data-anchor-id="disadvantages-2">Disadvantages</h3>
<ul>
<li>Worse performance in Entity Disambiguation compared to LM-based approaches</li>
<li>Requires training data for some of the algorithms</li>
<li>Some libraries are old and have not been updated for some time</li>
</ul>
</section>
<section id="matching-algorithms-examples" class="level3">
<h3 class="anchored" data-anchor-id="matching-algorithms-examples">Matching Algorithms Examples</h3>
<ul>
<li>Jaccard similarity</li>
<li>Levenstein distance</li>
<li>Cosine similarity of vectors</li>
<li>Random Forest Similarity Classifier</li>
</ul>
</section>
<section id="related-libraries" class="level3">
<h3 class="anchored" data-anchor-id="related-libraries">Related libraries:</h3>
<ul>
<li><a href="https://github.com/anhaidgroup/py_entitymatching">https://github.com/anhaidgroup/py_entitymatching</a></li>
<li><a href="https://docs.dedupe.io/en/latest/">https://docs.dedupe.io/en/latest/</a></li>
<li><a href="https://github.com/anhaidgroup/deepmatcher">https://github.com/anhaidgroup/deepmatcher</a></li>
<li><a href="https://huggingface.co/shahrukhx01/paraphrase-mpnet-base-v2-fuzzy-matcher?text=fuzzformer">https://huggingface.co/shahrukhx01/paraphrase-mpnet-base-v2-fuzzy-matcher?text=fuzzformer</a></li>
</ul>
</section>
<section id="py_entitymatching-random-forest" class="level3">
<h3 class="anchored" data-anchor-id="py_entitymatching-random-forest">py_entitymatching + Random Forest</h3>
<div id="cell-16" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading libraries</span></span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> py_entitymatching <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> em</span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formatting data in required library configuration </span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train set</span></span>
<span id="cb12-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(synt_data)</span>
<span id="cb12-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.reset_index(names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>).reset_index(names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ltable_id"</span>).reset_index(names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtable_id"</span>)</span>
<span id="cb12-5">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-6">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_1'</span>]].rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_id'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_1'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_1'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity'</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-7">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_2'</span>]].rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_id'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_2'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_2'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity'</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-8">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ltable_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtable_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>]]</span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test set</span></span>
<span id="cb12-11">test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(real_data)</span>
<span id="cb12-12">test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.reset_index(names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>).reset_index(names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ltable_id"</span>).reset_index(names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtable_id"</span>)</span>
<span id="cb12-13">test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-14">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_1'</span>]].rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_id'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_1'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_1'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity'</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-15">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_2'</span>]].rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_id'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_2'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_2'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity'</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-16">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ltable_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtable_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match"</span>]]</span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Registering tables metadata in the library</span></span>
<span id="cb13-2">em.set_key(A, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb13-3">em.set_key(B, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb13-4">em.set_key(C, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb13-5">em.set_ltable(C, B)</span>
<span id="cb13-6">em.set_ltable(C, A)</span>
<span id="cb13-7"></span>
<span id="cb13-8">em.set_key(X, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb13-9">em.set_key(Y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb13-10">em.set_key(Z, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb13-11">em.set_ltable(Z, X)</span>
<span id="cb13-12">em.set_ltable(Z, Y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>True</code></pre>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating and blocking candidate matches (just for display)</span></span>
<span id="cb15-2">ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> em.OverlapBlocker()</span>
<span id="cb15-3">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ob.block_tables(A, B, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity'</span>, </span>
<span id="cb15-4">                    l_output_attrs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber'</span>], </span>
<span id="cb15-5">                    r_output_attrs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber'</span>],</span>
<span id="cb15-6">                    overlap_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/exp/lib/python3.10/site-packages/py_entitymatching/blocker/overlap_blocker.py:258: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  l_df[l_dummy_overlap_attr] = l_df[l_overlap_attr]
/Users/santiagovelez/anaconda3/envs/exp/lib/python3.10/site-packages/py_entitymatching/blocker/overlap_blocker.py:259: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  r_df[r_dummy_overlap_attr] = r_df[r_overlap_attr]
/Users/santiagovelez/anaconda3/envs/exp/lib/python3.10/site-packages/py_entitymatching/blocker/overlap_blocker.py:615: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  table[overlap_attr] = values</code></pre>
</div>
</div>
<div id="cell-20" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Workaround - Saving labeled data so we are able to load it in the library with the right metadata</span></span>
<span id="cb17-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_1'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_chamber'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_2'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_chamber'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_1'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_entity'</span>,</span>
<span id="cb17-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_2'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_entity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'match'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gold'</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-4">df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp_df.csv"</span>)</span>
<span id="cb17-5">test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_df.rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_1'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_chamber'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chamber_2'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_chamber'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_1'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_entity'</span>,</span>
<span id="cb17-6">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entity_2'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_entity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'match'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gold'</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-7">test_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp_test_df.csv"</span>)</span></code></pre></div>
</div>
<div id="cell-21" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load training data with metadata</span></span>
<span id="cb18-2">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> em.read_csv_metadata(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp_df.csv"</span>, </span>
<span id="cb18-3">                         key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_id'</span>,</span>
<span id="cb18-4">                         ltable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>A, rtable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>B, </span>
<span id="cb18-5">                         fk_ltable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_id'</span>, fk_rtable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_id'</span>)</span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load test data with metadata</span></span>
<span id="cb18-7">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> em.read_csv_metadata(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp_test_df.csv"</span>, </span>
<span id="cb18-8">                         key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_id'</span>,</span>
<span id="cb18-9">                         ltable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X, rtable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Y, </span>
<span id="cb18-10">                         fk_ltable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_id'</span>, fk_rtable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_id'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Metadata file is not present in the given path; proceeding to read the csv file.
Metadata file is not present in the given path; proceeding to read the csv file.</code></pre>
</div>
</div>
<div id="cell-22" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Selecting features for Entity Matching Model</span></span>
<span id="cb20-2">feature_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> em.get_features_for_matching(A, B, validate_inferred_attr_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div id="cell-23" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Building feature vectors for entity matching model</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the attrs. to be included in the feature vector table</span></span>
<span id="cb21-3">attrs_from_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_entity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_chamber'</span>,</span>
<span id="cb21-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_entity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_chamber'</span>,]</span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the labeled data to feature vectors using the feature table</span></span>
<span id="cb21-6">H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> em.extract_feature_vecs(G, </span>
<span id="cb21-7">                            feature_table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>feature_table, </span>
<span id="cb21-8">                            attrs_before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attrs_from_table,</span>
<span id="cb21-9">                            attrs_after<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gold'</span>,</span>
<span id="cb21-10">                            show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/exp/lib/python3.10/site-packages/numpy/core/fromnumeric.py:59: FutureWarning: 'DataFrame.swapaxes' is deprecated and will be removed in a future version. Please use 'DataFrame.transpose' instead.
  return bound(*args, **kwds)</code></pre>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training entity matching model with training data</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the RF Matcher</span></span>
<span id="cb23-3">rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> em.RFMatcher()</span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the attributes to be projected while training</span></span>
<span id="cb23-5">attrs_to_be_excluded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-6">attrs_to_be_excluded.extend([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gold'</span>])</span>
<span id="cb23-7">attrs_to_be_excluded.extend(attrs_from_table)</span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train using feature vectors from the labeled data.</span></span>
<span id="cb23-9">rf.fit(table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>H, exclude_attrs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attrs_to_be_excluded, target_attr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gold'</span>)</span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare test data for inference</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the attrs. to be included in the feature vector table</span></span>
<span id="cb24-3">attrs_from_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_entity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_chamber'</span>,</span>
<span id="cb24-4">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_entity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_chamber'</span>,]</span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the cancidate set to feature vectors using the feature table</span></span>
<span id="cb24-6">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> em.extract_feature_vecs(Z, feature_table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>feature_table,</span>
<span id="cb24-7">                             attrs_before<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attrs_from_table,</span>
<span id="cb24-8">                             show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the attributes to be excluded while predicting </span></span>
<span id="cb24-10">attrs_to_be_excluded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb24-11">attrs_to_be_excluded.extend([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ltable_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rtable_id'</span>])</span>
<span id="cb24-12">attrs_to_be_excluded.extend(attrs_from_table)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/exp/lib/python3.10/site-packages/numpy/core/fromnumeric.py:59: FutureWarning: 'DataFrame.swapaxes' is deprecated and will be removed in a future version. Please use 'DataFrame.transpose' instead.
  return bound(*args, **kwds)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
    - Avoid using `tokenizers` before the fork if possible
    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
    - Avoid using `tokenizers` before the fork if possible
    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
    - Avoid using `tokenizers` before the fork if possible
    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
    - Avoid using `tokenizers` before the fork if possible
    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
    - Avoid using `tokenizers` before the fork if possible
    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
    - Avoid using `tokenizers` before the fork if possible
    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)</code></pre>
</div>
</div>
<div id="cell-26" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict the matches on inference data</span></span>
<span id="cb26-2">predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf.predict(table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>L, exclude_attrs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attrs_to_be_excluded,                          </span>
<span id="cb26-3">              append<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, target_attr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predicted'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb26-4">predictions.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">_id</th>
<th data-quarto-table-cell-role="th">ltable_id</th>
<th data-quarto-table-cell-role="th">rtable_id</th>
<th data-quarto-table-cell-role="th">ltable_entity</th>
<th data-quarto-table-cell-role="th">ltable_chamber</th>
<th data-quarto-table-cell-role="th">rtable_entity</th>
<th data-quarto-table-cell-role="th">rtable_chamber</th>
<th data-quarto-table-cell-role="th">id_id_exm</th>
<th data-quarto-table-cell-role="th">id_id_anm</th>
<th data-quarto-table-cell-role="th">id_id_lev_dist</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">chamber_chamber_jac_qgm_3_qgm_3</th>
<th data-quarto-table-cell-role="th">entity_entity_jac_qgm_3_qgm_3</th>
<th data-quarto-table-cell-role="th">entity_entity_cos_dlm_dc0_dlm_dc0</th>
<th data-quarto-table-cell-role="th">entity_entity_jac_dlm_dc0_dlm_dc0</th>
<th data-quarto-table-cell-role="th">entity_entity_mel</th>
<th data-quarto-table-cell-role="th">entity_entity_lev_dist</th>
<th data-quarto-table-cell-role="th">entity_entity_lev_sim</th>
<th data-quarto-table-cell-role="th">entity_entity_nmw</th>
<th data-quarto-table-cell-role="th">entity_entity_sw</th>
<th data-quarto-table-cell-role="th">predicted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>Spann-Wilder, Tiffany</td>
<td>house</td>
<td>Tiffany Spann-Wilder</td>
<td>house</td>
<td>1</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>1.0</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>0.0</td>
<td>1.000000</td>
<td>13.0</td>
<td>13.0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>Landon C. Dais</td>
<td>house</td>
<td>Landon Dais</td>
<td>house</td>
<td>1</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>1.0</td>
<td>0.700000</td>
<td>0.666667</td>
<td>0.500000</td>
<td>0.973333</td>
<td>1.0</td>
<td>0.933333</td>
<td>14.0</td>
<td>14.0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>Giglio JA</td>
<td>house</td>
<td>Jodi Giglio</td>
<td>house</td>
<td>1</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>1.0</td>
<td>0.625000</td>
<td>0.666667</td>
<td>0.500000</td>
<td>0.945395</td>
<td>4.0</td>
<td>0.789474</td>
<td>12.0</td>
<td>12.0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>3</td>
<td>3</td>
<td>Brown, M</td>
<td>house</td>
<td>Marla Gallo Brown</td>
<td>house</td>
<td>1</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>1.0</td>
<td>0.571429</td>
<td>0.666667</td>
<td>0.500000</td>
<td>0.959048</td>
<td>2.0</td>
<td>0.866667</td>
<td>12.0</td>
<td>12.0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>4</td>
<td>4</td>
<td>J.T. 'Jabo' Waggoner\t</td>
<td>house</td>
<td>Jabo Waggoner</td>
<td>house</td>
<td>1</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>1.0</td>
<td>0.736842</td>
<td>0.500000</td>
<td>0.333333</td>
<td>0.986667</td>
<td>1.0</td>
<td>0.933333</td>
<td>13.0</td>
<td>13.0</td>
<td>1</td>
</tr>
</tbody>
</table>

<p>5 rows × 26 columns</p>
</div>
</div>
</div>
</section>
</section>
<section id="sources" class="level2">
<h2 class="anchored" data-anchor-id="sources">Sources</h2>
<section id="python-libraries" class="level3">
<h3 class="anchored" data-anchor-id="python-libraries">Python Libraries</h3>
<ul>
<li><a href="https://github.com/wbsg-uni-mannheim/MatchGPT/blob/main/LLMForEM">https://github.com/wbsg-uni-mannheim/MatchGPT/blob/main/LLMForEM</a></li>
<li><a href="https://huggingface.co/facebook/mgenre-wiki">https://huggingface.co/facebook/mgenre-wiki</a></li>
<li><a href="https://github.com/explosion/projects/tree/v3/tutorials/nel_emerson">https://github.com/explosion/projects/tree/v3/tutorials/nel_emerson</a></li>
<li><a href="https://pypi.org/project/spacy-entity-linker/">https://pypi.org/project/spacy-entity-linker/</a></li>
<li><a href="https://huggingface.co/shahrukhx01/paraphrase-mpnet-base-v2-fuzzy-matcher?text=fuzzformer">https://huggingface.co/shahrukhx01/paraphrase-mpnet-base-v2-fuzzy-matcher?text=fuzzformer</a></li>
<li><a href="https://github.com/megagonlabs/ditto">https://github.com/megagonlabs/ditto</a></li>
<li><a href="https://dedupe.io">https://dedupe.io</a></li>
<li><a href="https://github.com/anhaidgroup/deepmatcher">https://github.com/anhaidgroup/deepmatcher</a></li>
<li><a href="https://nbviewer.org/github/anhaidgroup/py_entitymatching/blob/master/notebooks/guides/end_to_end_em_guides/Basic%20EM%20Workflow%20Restaurants%20-%201.ipynb">https://nbviewer.org/github/anhaidgroup/py_entitymatching</a></li>
<li><a href="https://github.com/facebookresearch/GENRE">https://github.com/facebookresearch/GENRE</a></li>
<li><a href="https://github.com/Babelscape/multinerd?tab=readme-ov-file">https://github.com/Babelscape/multinerd?tab=readme-ov-file</a></li>
<li><a href="https://github.com/SapienzaNLP/extend?tab=readme-ov-file">https://github.com/SapienzaNLP/extend?tab=readme-ov-file</a></li>
<li><a href="https://github.com/Lucaterre/spacyfishing">https://github.com/Lucaterre/spacyfishing</a></li>
</ul>
</section>
<section id="papers" class="level3">
<h3 class="anchored" data-anchor-id="papers">Papers</h3>
<ul>
<li><a href="https://arxiv.org/pdf/2407.04020">LLMAEL: Large Language Models are Good Context Augmenters for Entity Linking</a></li>
<li><a href="https://arxiv.org/pdf/2310.11244">Entity Matching using Large Language Models</a></li>
<li><a href="https://arxiv.org/pdf/2402.06738">EntGPT: Linking Generative Large Language Models with Knowledge Bases</a></li>
<li><a href="https://arxiv.org/pdf/2401.03426">On Leveraging Large Language Models for Enhancing Entity Resolution</a></li>
<li><a href="https://arxiv.org/pdf/2305.03423">Using ChatGPT for Entity Matching</a></li>
<li><a href="https://towardsdatascience.com/is-this-you-entity-matching-in-the-modern-data-stack-with-large-language-models-19a730373b26">“Is This You?” Entity Matching in the Modern Data Stack with Large Language models</a></li>
<li><a href="https://arxiv.org/pdf/1802.01021">DeepType: Multilingual Entity Linking by Neural Type System Evolution</a></li>
<li><a href="https://aclanthology.org/2022.findings-naacl.60.pdf">MultiNERD: A Multilingual, Multi-Genre and Fine-Grained Dataset for Named Entity Recognition (and Disambiguation)</a></li>
<li><a href="https://arxiv.org/pdf/2010.00904">AUTOREGRESSIVE ENTITY RETRIEVAL</a></li>
<li><a href="https://arxiv.org/pdf/2004.00584">Deep Entity Matching with Pre-Trained Language Models</a></li>
<li><a href="https://github.com/sebastianruder/NLP-progress/blob/master/english/entity_linking.md">https://github.com/sebastianruder/NLP-progress/blob/master/english/entity_linking.md</a></li>
<li><a href="https://openai.com/index/discovering-types-for-entity-disambiguation/">https://openai.com/index/discovering-types-for-entity-disambiguation/</a></li>
</ul>


</section>
</section>

 ]]></description>
  <category>entity-matching</category>
  <category>nlp</category>
  <category>code</category>
  <category>python</category>
  <category>lm</category>
  <category>gpt4</category>
  <category>genre</category>
  <category>rf</category>
  <guid>https://santiagomvc.github.io/posts/entity_matching_intro/entity_matching_intro.html</guid>
  <pubDate>Sun, 21 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://santiagomvc.github.io/posts/entity_matching_intro/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Applied Intro to Search Algorithms</title>
  <dc:creator>Santiago Velez</dc:creator>
  <link>https://santiagomvc.github.io/posts/intro_to_search_algorithms/intro_to_search_algorithms.html</link>
  <description><![CDATA[ 





<p>Information Retrieval and Reranking is a wide field with significant nuance and incredible importance to multiple businesses. This post is an applied introduction to building a simple search application, displaying three common approaches to search, one to reranking, and some basic evaluation metrics. This is not intended as a deep dive into each algorithm, but as a high-level display of the basic components required to build a search solution. For more information please review the references at the end of the post.</p>
<p><strong>TL;DR:</strong> BM25 is the default for a reason: simple, fast, and accurate. You should start there and use it as the benchmark for other approaches. If you have time and require increased accuracy, Colbert is worth exploring, but focus first on gathering data and building evaluation metrics.</p>
<p>You can run the following code on Google Colab clicking here.</p>
<p><a target="_blank" href="https://colab.research.google.com/github/santiagomvc/search_methods_intro/blob/main/search_methods.ipynb"> <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"> </a></p>
<section id="install-required-libraries" class="level3">
<h3 class="anchored" data-anchor-id="install-required-libraries">Install required libraries</h3>
<p>Tested with python 3.10.1</p>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install numpy panda torch langchain<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>splitters sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>transformers rank_bm25 faiss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cpu ranx ragatouille<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0.8</span> llama<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9.48</span></span></code></pre></div>
</div>
</section>
<section id="import-libraries" class="level3">
<h3 class="anchored" data-anchor-id="import-libraries">Import libraries</h3>
<div id="cell-6" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_text_splitters <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RecursiveCharacterTextSplitter</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> faiss</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ragatouille <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RAGPretrainedModel</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rank_bm25 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BM25Okapi</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ranx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Qrels, Run, fuse, evaluate</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/threadpoolctl.py:1214: RuntimeWarning: 
Found Intel OpenMP ('libiomp') and LLVM OpenMP ('libomp') loaded at
the same time. Both libraries are known to be incompatible and this
can cause random crashes or deadlocks on Linux when loaded in the
same Python program.
Using threadpoolctl may cause crashes or deadlocks. For more
information and possible workarounds, please see
    https://github.com/joblib/threadpoolctl/blob/master/multiple_openmp.md

  warnings.warn(msg, RuntimeWarning)</code></pre>
</div>
</div>
</section>
<section id="define-utility-functions" class="level3">
<h3 class="anchored" data-anchor-id="define-utility-functions">Define utility functions</h3>
<p>We define a simple text processing function. Possible improvements include tokenization, stemming, stopword removal, etc.</p>
<div id="cell-8" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> text_preprocess(text):</span>
<span id="cb4-2">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text.lower()</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> text</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_run(results_df, doc_id_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_id"</span>):</span>
<span id="cb5-2">    run_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results_df.copy()</span>
<span id="cb5-3">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Run.from_df(</span>
<span id="cb5-4">        df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run_df,</span>
<span id="cb5-5">        q_id_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query_id"</span>,</span>
<span id="cb5-6">        doc_id_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>doc_id_col,</span>
<span id="cb5-7">        score_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>,</span>
<span id="cb5-8">    )</span>
<span id="cb5-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> run</span></code></pre></div>
</div>
</section>
<section id="prepare-data" class="level3">
<h3 class="anchored" data-anchor-id="prepare-data">Prepare data</h3>
<section id="load-data" class="level4">
<h4 class="anchored" data-anchor-id="load-data">Load data</h4>
<div id="cell-12" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">texts_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/santiagomvc/search_methods_intro/main/data/texts.csv"</span>)</span>
<span id="cb6-2">queries_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/santiagomvc/search_methods_intro/main/data/queries.csv"</span>)</span></code></pre></div>
</div>
</section>
<section id="chunking-configuration" class="level4">
<h4 class="anchored" data-anchor-id="chunking-configuration">Chunking configuration</h4>
<p>Splits text into smaller chunks for more detailed representations of the text.</p>
<div id="cell-15" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">text_splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecursiveCharacterTextSplitter(</span>
<span id="cb7-2">    chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,</span>
<span id="cb7-3">    chunk_overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb7-4">    length_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>,</span>
<span id="cb7-5">    is_separator_regex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb7-6">)</span></code></pre></div>
</div>
</section>
<section id="split-data-and-process-chunks" class="level4">
<h4 class="anchored" data-anchor-id="split-data-and-process-chunks">Split data and process chunks</h4>
<div id="cell-17" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">doc_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-2">chunk_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-3">chunk_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> texts_df.iterrows():</span>
<span id="cb8-5">    doc_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>])</span>
<span id="cb8-6">    doc_chunk_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_splitter.split_text(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_text"</span>])</span>
<span id="cb8-7">    n_chunk_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(doc_chunk_texts)</span>
<span id="cb8-8">    doc_chunk_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>doc_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_chunk_texts)]</span>
<span id="cb8-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># basic text processing</span></span>
<span id="cb8-10">    doc_chunk_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [text_preprocess(chunk) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> chunk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> doc_chunk_texts]</span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save results</span></span>
<span id="cb8-12">    doc_ids.extend([doc_id] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_chunk_texts)</span>
<span id="cb8-13">    chunk_ids.extend(doc_chunk_ids)</span>
<span id="cb8-14">    chunk_texts.extend(doc_chunk_texts)</span></code></pre></div>
</div>
</section>
<section id="save-results-as-df" class="level4">
<h4 class="anchored" data-anchor-id="save-results-as-df">Save results as df</h4>
<div id="cell-19" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">chunks_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb9-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>: doc_ids,</span>
<span id="cb9-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_id"</span>: chunk_ids,</span>
<span id="cb9-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_text"</span>: chunk_texts,</span>
<span id="cb9-5">})</span></code></pre></div>
</div>
</section>
</section>
<section id="indexing-data" class="level3">
<h3 class="anchored" data-anchor-id="indexing-data">Indexing data</h3>
<section id="sparse-representations-bm25" class="level4">
<h4 class="anchored" data-anchor-id="sparse-representations-bm25">Sparse Representations: BM25</h4>
<p>BM25 is a ranking algorithm based on multiple statistics calculated using the terms in the Query and Documents, including term frequency in the document, document length, term frequency in all documents, etc.</p>
<div id="cell-22" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">bm_25_tokenized_corpus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [chunk.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> chunk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> chunk_texts]</span>
<span id="cb10-2">bm25_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BM25Okapi(bm_25_tokenized_corpus)</span></code></pre></div>
</div>
</section>
<section id="basic-semantic-similarity-sentence-transformers-faiss-index" class="level4">
<h4 class="anchored" data-anchor-id="basic-semantic-similarity-sentence-transformers-faiss-index">Basic Semantic Similarity: Sentence Transformers + Faiss Index</h4>
<p>Semantic Similarity is the task of determining how similar is the meaning of two or more texts. It uses ML models to convert text into a single dense vector that captures semantic information. Semantic similarity can be used as a ranking function by calculating the similarity between the Query and each Document, retrieving those with the higher similarity.</p>
<div id="cell-24" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">sentsim_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all-mpnet-base-v2"</span>)</span>
<span id="cb11-2">sentsim_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentsim_model.encode(chunk_texts)</span>
<span id="cb11-3">sentsim_embedding_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentsim_embeddings.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb11-4">sentsim_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> faiss.IndexFlatL2(sentsim_embedding_size)</span>
<span id="cb11-5">sentsim_index.add(sentsim_embeddings)</span></code></pre></div>
</div>
</section>
<section id="advanced-semantic-similarity-colbert-ragatuille" class="level4">
<h4 class="anchored" data-anchor-id="advanced-semantic-similarity-colbert-ragatuille">Advanced Semantic Similarity: Colbert + RAGatuille</h4>
<p>Colbert is a retrieval model built on top of BERT-like Language Models. Colbert uses multiple token-level dense embeddings to calculate the relevance between the Query and Documents, while traditional sentence embeddings collapse query and document information into single embeddings. Take a look at this <a href="https://colbert.aiserv.cloud">Vespa Demo</a> for a very interesting visual aid.</p>
<div id="cell-26" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Required so ragatouille runs safely</span></span>
<span id="cb12-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb12-3">        colbert_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RAGPretrainedModel.from_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".ragatouille/colbert/indexes/index"</span>)</span>
<span id="cb12-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb12-5">        colbert_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RAGPretrainedModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colbert-ir/colbertv2.0"</span>)</span>
<span id="cb12-6">        colbert_index.index(</span>
<span id="cb12-7">            index_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>, </span>
<span id="cb12-8">            collection<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chunk_texts, </span>
<span id="cb12-9">            document_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chunk_ids, </span>
<span id="cb12-10">            use_faiss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb12-11">            max_document_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,</span>
<span id="cb12-12">            split_documents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb12-13">        )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[Jul 02, 18:29:22] Loading segmented_maxsim_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/cuda/amp/grad_scaler.py:126: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.
  warnings.warn(</code></pre>
</div>
</div>
</section>
</section>
<section id="search-functions" class="level3">
<h3 class="anchored" data-anchor-id="search-functions">Search Functions</h3>
<section id="bm25" class="level4">
<h4 class="anchored" data-anchor-id="bm25">BM25</h4>
<div id="cell-29" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bm25_search(query_text, bm25_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bm25_index, chunks_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chunks_df):</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preprocess query same as docs</span></span>
<span id="cb15-3">    query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_preprocess(query_text)</span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transform query</span></span>
<span id="cb15-5">    tokenized_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_text.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb15-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search with bm25 index</span></span>
<span id="cb15-7">    doc_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bm25_index.get_scores(tokenized_query)</span>
<span id="cb15-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format as dataframe</span></span>
<span id="cb15-9">    bm25_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chunks_df.copy()</span>
<span id="cb15-10">    bm25_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> doc_scores</span>
<span id="cb15-11">    bm25_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bm25_df.loc[bm25_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop to get docs, no chunks</span></span>
<span id="cb15-13">    bm25_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bm25_df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb15-14">    bm25_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bm25_df.drop_duplicates(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>], keep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>)</span>
<span id="cb15-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return results</span></span>
<span id="cb15-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> bm25_df</span></code></pre></div>
</div>
</section>
<section id="sentece-similarity" class="level4">
<h4 class="anchored" data-anchor-id="sentece-similarity">Sentece Similarity</h4>
<div id="cell-31" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sentsim_search(query_text, sentsim_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sentsim_model, sentsim_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sentsim_index, chunks_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chunks_df, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preprocess query same as docs</span></span>
<span id="cb16-3">    query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_preprocess(query_text)</span>
<span id="cb16-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Encode query</span></span>
<span id="cb16-5">    sentsim_query_emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentsim_model.encode(query_text).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search with embedding</span></span>
<span id="cb16-7">    D, I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentsim_index.search(sentsim_query_emb, k)</span>
<span id="cb16-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format as dataframe</span></span>
<span id="cb16-9">    sentsim_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chunks_df.copy()</span>
<span id="cb16-10">    sentsim_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentsim_df.loc[I[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb16-11">    sentsim_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb16-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop to get docs, no chunks</span></span>
<span id="cb16-13">    sentsim_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentsim_df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-14">    sentsim_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentsim_df.drop_duplicates(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>], keep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>)</span>
<span id="cb16-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sentsim_df</span></code></pre></div>
</div>
</section>
<section id="colbert" class="level4">
<h4 class="anchored" data-anchor-id="colbert">Colbert</h4>
<div id="cell-33" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> colbert_search(query_text, colbert_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colbert_index, chunks_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chunks_df, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preprocess query same as docs</span></span>
<span id="cb17-3">    query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_preprocess(query_text)</span>
<span id="cb17-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run query</span></span>
<span id="cb17-5">    colbert_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colbert_index.search(query_text, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>k)</span>
<span id="cb17-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save results as a df</span></span>
<span id="cb17-7">    colbert_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(colbert_results)</span>
<span id="cb17-8">    colbert_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colbert_df.rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"document_id"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_id"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-9">    colbert_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colbert_df.merge(chunks_df, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_id"</span>)</span>
<span id="cb17-10">    colbert_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colbert_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>]]</span>
<span id="cb17-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop to get docs, no chunks</span></span>
<span id="cb17-12">    colbert_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colbert_df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb17-13">    colbert_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colbert_df.drop_duplicates(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>], keep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>)</span>
<span id="cb17-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> colbert_df</span></code></pre></div>
</div>
</section>
<section id="rank-fusion-min-max-norm-combmax-fusion" class="level4">
<h4 class="anchored" data-anchor-id="rank-fusion-min-max-norm-combmax-fusion">Rank Fusion: Min-Max Norm, CombMAX fusion</h4>
<p>Since retrieval algorithms have different strengths, sometimes it’s useful to combine predictions to maximize users’ expected results. Reranking algorithms receive candidates and scores from different retrieval algorithms, and return a single combined pair of documents and scores. Two important parameters for Reranking are Score Normalization and Fusion Methods. There are multiple methods for Normalization and Fusion, in this case, we use:</p>
<ul>
<li>Min-Max Norm: Scales the scores of a retriever between 0 and 1, scaling to 0 the minimum score and 1 the maximum score.</li>
<li>CombMax fusion: Combines scores from different sources by taking the maximum score for each item.</li>
</ul>
<div id="cell-35" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> combined_search(query_text, fusion_norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min-max"</span>, fusion_method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>, chunks_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chunks_df):</span>
<span id="cb18-2">    runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> search_fun <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [bm25_search, sentsim_search, colbert_search]:</span>
<span id="cb18-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save results in Run format</span></span>
<span id="cb18-5">        run_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_fun(query_text)</span>
<span id="cb18-6">        run_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query_id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># query id is required for the run</span></span>
<span id="cb18-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run_df["chunk_id"] = run_df["chunk_id"].astype(str)</span></span>
<span id="cb18-8">        run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_run(run_df)</span>
<span id="cb18-9">        runs.append(run)</span>
<span id="cb18-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Combining runs</span></span>
<span id="cb18-11">    combined_run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fuse(</span>
<span id="cb18-12">        runs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>runs,</span>
<span id="cb18-13">        norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fusion_norm,</span>
<span id="cb18-14">        method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fusion_method,</span>
<span id="cb18-15">    )</span>
<span id="cb18-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Saving as dataframe</span></span>
<span id="cb18-17">    combined_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_run.to_dataframe()</span>
<span id="cb18-18">    combined_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_df.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q_id"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-19">    combined_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_df.rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_id"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-20">    combined_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_df.merge(chunks_df, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_id"</span>)</span>
<span id="cb18-21">    combined_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunk_text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>]]</span>
<span id="cb18-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop to get docs, no chunks</span></span>
<span id="cb18-23">    combined_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb18-24">    combined_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_df.drop_duplicates(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>], keep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>)</span>
<span id="cb18-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Return similar format to other responses</span></span>
<span id="cb18-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> combined_df</span></code></pre></div>
</div>
</section>
<section id="global-search-function" class="level4">
<h4 class="anchored" data-anchor-id="global-search-function">Global Search Function</h4>
<div id="cell-37" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> search(query_text, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bm25"</span>):</span>
<span id="cb19-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bm25"</span>:</span>
<span id="cb19-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> bm25_search(query_text)</span>
<span id="cb19-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentsim"</span>:</span>
<span id="cb19-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sentsim_search(query_text)</span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colbert"</span>:</span>
<span id="cb19-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> colbert_search(query_text)</span>
<span id="cb19-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"combined"</span>:</span>
<span id="cb19-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> combined_search(query_text)</span></code></pre></div>
</div>
</section>
</section>
<section id="evaluates-search-with-labeled-queries" class="level3">
<h3 class="anchored" data-anchor-id="evaluates-search-with-labeled-queries">Evaluates search with labeled queries</h3>
<section id="evaluation-function" class="level4">
<h4 class="anchored" data-anchor-id="evaluation-function">Evaluation function</h4>
<p>Metrics allow us to evaluate search algorithms performance in a fast and automated way. Though they don’t exactly map to users’ preferences, and usually require manual labor first, they allow for quick iteration and supervision during the experimental and deployment phases. There are multiple metrics to evaluate search algorithms. In this case we use:</p>
<ul>
<li>F1 Score: Harmonic mean of precision and recall</li>
<li>MRR: Average multiplicative inverse of the rank of the first retrieved relevant document</li>
</ul>
<div id="cell-40" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> evaluate_search(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bm25"</span>, queries_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>queries_df):</span>
<span id="cb20-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preprocess df</span></span>
<span id="cb20-3">    queries_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query_id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queries_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query_id"</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb20-4">    queries_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queries_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb20-5">    queries_df.loc[queries_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace all positive scores with 1</span></span>
<span id="cb20-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Qrel for evaluation</span></span>
<span id="cb20-7">    qrels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Qrels.from_df(</span>
<span id="cb20-8">        df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>queries_df,</span>
<span id="cb20-9">        q_id_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query_id"</span>,</span>
<span id="cb20-10">        doc_id_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>,</span>
<span id="cb20-11">        score_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>,</span>
<span id="cb20-12">    )</span>
<span id="cb20-13"></span>
<span id="cb20-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get search responses</span></span>
<span id="cb20-15">    unique_queries_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queries_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query_text"</span>]].drop_duplicates()</span>
<span id="cb20-16">    unique_queries_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unique_queries_df.values.tolist()</span>
<span id="cb20-17">    responses_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb20-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> query_id, query_text <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> unique_queries_list:</span>
<span id="cb20-19">        response_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search(query_text, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mode)</span>
<span id="cb20-20">        response_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query_id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_id</span>
<span id="cb20-21">        responses_list.append(response_df)</span>
<span id="cb20-22"></span>
<span id="cb20-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build run dataframe</span></span>
<span id="cb20-24">    run_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(responses_list)</span>
<span id="cb20-25">    run_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb20-26">    run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_run(run_df, doc_id_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_id"</span>)</span>
<span id="cb20-27"></span>
<span id="cb20-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Evaluate run</span></span>
<span id="cb20-29">    metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> evaluate(qrels, run, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrr"</span>])</span>
<span id="cb20-30">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(mode, metrics)</span></code></pre></div>
</div>
</section>
<section id="evaluate-bm25" class="level4">
<h4 class="anchored" data-anchor-id="evaluate-bm25">Evaluate BM25</h4>
<div id="cell-42" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">evaluate_search(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bm25"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>bm25 {'f1': 0.6981481481481481, 'mrr': 0.9166666666666666}</code></pre>
</div>
</div>
</section>
<section id="evaluate-single-vector-sentence-similarity" class="level4">
<h4 class="anchored" data-anchor-id="evaluate-single-vector-sentence-similarity">Evaluate Single Vector Sentence Similarity</h4>
<div id="cell-44" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">evaluate_search(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentsim"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>sentsim {'f1': 0.6555555555555556, 'mrr': 0.8888888888888888}</code></pre>
</div>
</div>
</section>
<section id="evaluate-colbert" class="level4">
<h4 class="anchored" data-anchor-id="evaluate-colbert">Evaluate Colbert</h4>
<div id="cell-46" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">evaluate_search(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colbert"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading searcher for index index for the first time... This may take a few seconds
[Jul 02, 18:29:35] #&gt; Loading codec...
[Jul 02, 18:29:35] #&gt; Loading IVF...
[Jul 02, 18:29:35] Loading segmented_lookup_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/cuda/amp/grad_scaler.py:126: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Jul 02, 18:29:36] #&gt; Loading doclens...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|████████████████████████████████████████████| 1/1 [00:00&lt;00:00, 603.06it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Jul 02, 18:29:36] #&gt; Loading codes and residuals...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
100%|█████████████████████████████████████████████| 1/1 [00:00&lt;00:00, 65.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Jul 02, 18:29:36] Loading filter_pids_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Jul 02, 18:29:36] Loading decompress_residuals_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...
Searcher loaded!

#&gt; QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==
#&gt; Input: . juneteenth,          True,       None
#&gt; Output IDs: torch.Size([32]), tensor([  101,     1,  2238, 17389,  3372,  2232,   102,   103,   103,   103,
          103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
          103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
          103,   103])
#&gt; Output Mask: torch.Size([32]), tensor([1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(
/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(
/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(
/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(
/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>colbert {'f1': 0.7944444444444444, 'mrr': 1.0}</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(</code></pre>
</div>
</div>
</section>
<section id="evaluate-rank-fusion-min-max-norm-combmax-fusion" class="level4">
<h4 class="anchored" data-anchor-id="evaluate-rank-fusion-min-max-norm-combmax-fusion">Evaluate Rank Fusion (Min-Max Norm, CombMAX fusion)</h4>
<div id="cell-48" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">evaluate_search(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"combined"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(
/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(
/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(
/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(
/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(
/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>combined {'f1': 0.6814814814814815, 'mrr': 0.8888888888888888}</code></pre>
</div>
</div>
</section>
</section>
<section id="try-it-yourself-only-on-interactive-mode" class="level3">
<h3 class="anchored" data-anchor-id="try-it-yourself-only-on-interactive-mode">Try it yourself! (Only on interactive mode)</h3>
<div id="cell-50" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your query:"</span>)</span>
<span id="cb41-2">search_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the search mode (bm25, sentsim, colbert, combined):"</span>)</span>
<span id="cb41-3">search(query_text, search_mode).to_dict(orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"records"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Enter your query: health
Enter the search mode (bm25, sentsim, colbert, combined): combined</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/santiagovelez/anaconda3/envs/temp2/lib/python3.10/site-packages/torch/amp/autocast_mode.py:250: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>[{'doc_id': '16',
  'chunk_id': '16-4',
  'chunk_text': "13 vacation rentals or short-term rentals as follows:\n14 1. to protect the public's health and safety, including rules and\n15 regulations related to fire and building codes, health and sanitation,",
  'score': 1.0},
 {'doc_id': '10',
  'chunk_id': '10-48',
  'chunk_text': '110 of social work, psychologist licensed by the board of psychology, or other licensed counseling\n111 professional with appropriate experience and training, provided that any such individual makes progress',
  'score': 1.0},
 {'doc_id': '17',
  'chunk_id': '17-56',
  'chunk_text': '41 (10) "health care provider" or "provider" means any person or entity li-\n42 censed, certified, or otherwise authorized by law to administer health care\n43 in the ordinary course of business or practice of a profession, including',
  'score': 1.0},
 {'doc_id': '14',
  'chunk_id': '14-76',
  'chunk_text': '176 analysts, and other licensed health and behavioral positions, which may either be employed by the\n177 school board or provided through contracted services.',
  'score': 0.439275072516164},
 {'doc_id': '12',
  'chunk_id': '12-42',
  'chunk_text': '100 deduction for such taxable year for long-term health care insurance premiums paid by him.\n101 11. contract payments to a producer of quota tobacco or a tobacco quota holder, or their spouses, as',
  'score': 0.1682393388722695},
 {'doc_id': '13',
  'chunk_id': '13-6',
  'chunk_text': '19 conditions of employment of the workforce \n20 \n21 . however, no locality shall adopt any workplace rule, other than for the purposes of a\n22 community services board or behavioral health authority as defined in § 37.2-100, that prevents an',
  'score': 0.01917413339973471},
 {'doc_id': '5',
  'chunk_id': '5-7',
  'chunk_text': '18 \n19 \n20 \n21 \n22 \n23 \n24 \n25 \n26 \n27 5. the mental and physical health of all individuals involved.\n28 6. which parent is more likely to allow the child frequent,\n29 meaningful and continuing contact with the other parent. this paragraph',
  'score': 0.0}]</code></pre>
</div>
</div>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://web.stanford.edu/class/cs276/handouts/lecture12-bm25etc.pdf">https://web.stanford.edu/class/cs276/handouts/lecture12-bm25etc.pdf</a></li>
<li><a href="https://zilliz.com/learn/mastering-bm25-a-deep-dive-into-the-algorithm-and-application-in-milvus">https://zilliz.com/learn/mastering-bm25-a-deep-dive-into-the-algorithm-and-application-in-milvus</a></li>
<li><a href="https://huggingface.co/tasks/sentence-similarity">https://huggingface.co/tasks/sentence-similarity</a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT">https://github.com/stanford-futuredata/ColBERT</a></li>
<li><a href="https://arxiv.org/abs/2004.12832">https://arxiv.org/abs/2004.12832</a></li>
<li><a href="https://til.simonwillison.net/llms/colbert-ragatouille">https://til.simonwillison.net/llms/colbert-ragatouille</a></li>
<li><a href="https://amenra.github.io/ranx/">https://amenra.github.io/ranx/</a></li>
<li><a href="https://trec.nist.gov/pubs/trec2/papers/txt/23.txt">https://trec.nist.gov/pubs/trec2/papers/txt/23.txt</a></li>
</ul>


</section>

 ]]></description>
  <category>search</category>
  <category>reranking</category>
  <category>code</category>
  <category>python</category>
  <category>bm25</category>
  <category>colbert</category>
  <category>sentence-transformers</category>
  <guid>https://santiagomvc.github.io/posts/intro_to_search_algorithms/intro_to_search_algorithms.html</guid>
  <pubDate>Sun, 14 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://santiagomvc.github.io/posts/intro_to_search_algorithms/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Installing Torch CPU with Poetry</title>
  <dc:creator>Santiago Velez</dc:creator>
  <link>https://santiagomvc.github.io/posts/installing_torch_cpu_with_poetry/installing_torch_cpu_with_poetry.html</link>
  <description><![CDATA[ 





<p>Having a working poetry environment that installs only cpu supported versions of torch is a good way to reduce the size of your docker container and speed up deployments. The following is a rough solution that seems to work (locally on Mac and Docker container) and could be used while torch and poetry solve their compatibility issues.</p>
<p>Inside your regular <code>pyproject.toml</code> file, include in <code>[tool.poetry.dependencies]</code> the following <code>torch</code> definition:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-2">     {url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cpu/torch-2.0.0%2Bcpu-cp39-cp39-linux_x86_64.whl"</span>, markers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platform_system == </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Linux</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>},</span>
<span id="cb1-3">     {url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cpu/torch-2.0.0-cp39-none-macosx_10_9_x86_64.whl"</span>, markers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platform_system == </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Darwin</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> and platform_machine == </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x86_64</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>},</span>
<span id="cb1-4">     {url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cpu/torch-2.0.0-cp39-none-macosx_11_0_arm64.whl"</span>, markers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platform_system == </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Darwin</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> and platform_machine == </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">arm64</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>}</span>
<span id="cb1-5"> ]</span></code></pre></div>
<p>Why is such an ugly solution required? Here are some apparent torch-poetry compatibility issues:</p>
<ul>
<li><code>poetry install torch==2.0.1</code> omits required gpu drivers for linux, which makes the container small but unusable <a href="https://github.com/pytorch/pytorch/issues/100974">Pytorch 2.0.1 pypi wheel does not install dependent cuda libraries pytorch/pytorch#100974</a>.</li>
<li>pip and poetry install by default torch-cpu in mac and torch-gpu in linux . When specifying <a href="https://download.pytorch.org/whl/cpu">https://download.pytorch.org/whl/cpu</a> as package source to install torch-cpu-linux, Poetry is unable to find a torch-cpu-mac version to use (Does not find a <code>*+cpu</code> version for mac). <a href="https://github.com/python-poetry/poetry/issues/7685">poetry add with –index-url option python-poetry/poetry#7685</a>, <a href="https://github.com/python-poetry/poetry/issues/6409#issue-1361622121">Instructions for installing PyTorch python-poetry/poetry#6409 (comment)</a>.</li>
<li>poetry may have issues dynamically selecting python wheels based on platforms (doesn’t happen if you use the wheel link) <a href="https://github.com/python-poetry/poetry/issues/1616">Install wheel based on platform python-poetry/poetry#1616</a>.</li>
</ul>
<p>Here are some (so far) unsuccessful attempts to find a more elegant solution:</p>
<p>Attempt 1:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">[tool.poetry.dependencies]</span>
<span id="cb2-2">torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2.0.0"</span>, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch"</span>}</span>
<span id="cb2-3"></span>
<span id="cb2-4">[[tool.poetry.source]]</span>
<span id="cb2-5">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch"</span></span>
<span id="cb2-6">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cpu"</span></span>
<span id="cb2-7">priority <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"explicit"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"suplemental"</span></span></code></pre></div>
<p>Attempt 2:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">[tool.poetry.dependencies]</span>
<span id="cb3-2">torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb3-3">     {version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^2.0.0"</span>, platform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darwin"</span>},</span>
<span id="cb3-4">     {version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^2.0.0"</span>, platform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux"</span>, source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch"</span>},</span>
<span id="cb3-5">     {version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^2.0.0"</span>, platform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"win32"</span>, source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch"</span>},</span>
<span id="cb3-6">]</span>
<span id="cb3-7"></span>
<span id="cb3-8">[[tool.poetry.source]]</span>
<span id="cb3-9">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch"</span></span>
<span id="cb3-10">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cpu"</span></span>
<span id="cb3-11">priority <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"explicit"</span></span></code></pre></div>
<p>Attempt 3:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">[[tool.poetry.source]]</span>
<span id="cb4-2">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch_cpu"</span></span>
<span id="cb4-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cpu"</span></span>
<span id="cb4-4">priority <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"supplemental"</span></span>
<span id="cb4-5"></span>
<span id="cb4-6">[[tool.poetry.source]]</span>
<span id="cb4-7">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PyPI"</span></span>
<span id="cb4-8">priority <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"primary"</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">[tool.poetry.dependencies]</span>
<span id="cb4-11">torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=2.0.0, !=2.0.1"</span>, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch_cpu"</span> }</span></code></pre></div>
<p>Attempt 4:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">[[tool.poetry.source]]</span>
<span id="cb5-2">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PyPI"</span></span>
<span id="cb5-3">priority <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"primary"</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">[[tool.poetry.source]]</span>
<span id="cb5-6">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux_cpu"</span></span>
<span id="cb5-7">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cpu"</span></span>
<span id="cb5-8">priority <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"supplemental"</span></span>
<span id="cb5-9"></span>
<span id="cb5-10">[tool.poetry.group.linux_cpu]</span>
<span id="cb5-11">optional <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true</span>
<span id="cb5-12"></span>
<span id="cb5-13">[tool.poetry.group.linux_cpu.dependencies]</span>
<span id="cb5-14">torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=2.0.0, !=2.0.1"</span>, source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux_cpu"</span>}</span>
<span id="cb5-15"></span>
<span id="cb5-16">[tool.poetry.group.darwin_cpu]</span>
<span id="cb5-17">optional <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true</span>
<span id="cb5-18"></span>
<span id="cb5-19">[tool.poetry.group.darwin_cpu.dependencies]</span>
<span id="cb5-20">torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=2.0.0, !=2.0.1"</span>}</span></code></pre></div>
<p>In most attempts, the error was around the inability to find a torch-cpu-mac version to install when the <a href="https://download.pytorch.org/whl/cpu">https://download.pytorch.org/whl/cpu</a> repo was included.</p>



 ]]></description>
  <category>code</category>
  <category>python</category>
  <category>torch</category>
  <category>poetry</category>
  <guid>https://santiagomvc.github.io/posts/installing_torch_cpu_with_poetry/installing_torch_cpu_with_poetry.html</guid>
  <pubDate>Mon, 11 Sep 2023 05:00:00 GMT</pubDate>
  <media:content url="https://santiagomvc.github.io/posts/installing_torch_cpu_with_poetry/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Is Artificial Intelligence a Risk for Public Policy?</title>
  <dc:creator>Santiago Velez</dc:creator>
  <link>https://santiagomvc.github.io/posts/ai_risks_for_public_policy/ai_risks_for_public_policy.html</link>
  <description><![CDATA[ 





<p><em>This is an extended version of the article published in Plural’s blog. You can find a shorter version <a href="https://pluralpolicy.com/blog/ai-risks-public-policy/">here</a></em>.</p>
<p>Current Machine Learning models have the potential to automate and enhance activities in multiple fields, including Public Policy. Large Language Models can be used to summarize bills, extract entities, and even propose legislation. However, the same technology can be used to muffle the legislative process with biased responses, or help bad actors astroturf and hide harmful legislation. The complexity behind drafting and passing legislation makes the impact of AI even more difficult to understand.</p>
<section id="policy-making-is-complex" class="level2">
<h2 class="anchored" data-anchor-id="policy-making-is-complex">Policy-Making is Complex</h2>
<p>Policy-making is a years-long process influenced by multiple actors, so the road from grassroots activism to executive signing can take significant time. The political nature of the work also makes it harder to get agreements even on fundamental levels. Bureaucracy combines with complexity to make the process inefficient and time-consuming, making most of the gains available to powerful organizations.</p>
<p>Traditional data analysis and statistics have affected policy for a long time, from supporting data-based policies to predicting bill passing and election outcomes. However, the advent of powerful Machine Learning models and the advances in Natural Language Processing have allowed new and incredible use cases like identifying policy topics, extracting named entity jurisdictions, summarizing bills, and even chat-like question answering. This new technology has the ability to exert positive and negative influence on the policy-making process.</p>
</section>
<section id="the-risks-of-using-ai-for-public-policy-work" class="level2">
<h2 class="anchored" data-anchor-id="the-risks-of-using-ai-for-public-policy-work">The Risks of Using AI for Public Policy Work</h2>
<p>Machine Learning and statistics can have a negative impact on Public Policy either by misunderstanding how models work or by using the models correctly for non-democratic objectives.</p>
<section id="bias-in-ai-data" class="level3">
<h3 class="anchored" data-anchor-id="bias-in-ai-data">Bias in AI Data</h3>
<p>Machine Learning models learn from the data they are trained with, which means the input data has a defining effect on the model results. Since models are usually trained to minimize errors and maximize accuracy, it’s possible for models to learn artifacts that correlate with certain scenarios but are not causes of it. Models can also have great performance in average but regular performance for specific and important subgroups, which were likely less represented in the training data.</p>
<p>Research at MIT showed that around 2017 some commercial Gender Classification models displayed <a href="https://www.media.mit.edu/publications/gender-shades-intersectional-accuracy-disparities-in-commercial-gender-classification/">significant disparities</a> in the classification of darker-skinned females and lighter-skinned males, with error rates of up to 34.7%.&nbsp;</p>
<p>Given the complexity, nuance, and variety in biases, there’s not a single and clear solution to the problems it raises. Google tried to improve its face recognition for its Pixel 4 phone, but it raised <a href="https://www.vox.com/recode/2019/10/17/20917285/google-pixel-4-facial-recognition-tech-black-people-reset-podcast">some criticism</a> for the methods it used to gather the required data. This is a complex problem that must be treated accordingly.</p>
</section>
<section id="personal-information-and-privacy-risks" class="level3">
<h3 class="anchored" data-anchor-id="personal-information-and-privacy-risks">Personal Information and Privacy Risks</h3>
<p>Since modern ML Models are being trained with terabytes and terabytes of data, it is almost impossible to manually verify that there’s no PII, private, or copyrighted information in the training sets. This means that, if the dataset was not cleaned correctly, your pictures, social security number, and medical information may be available without your permission. Even worse, some companies are consciously trying to collect this personal data with shady means.</p>
<p>There have been multiple cases in which police units have <a href="https://arstechnica.com/tech-policy/2023/01/facial-recognition-error-led-to-wrongful-arrest-of-black-man-report-says/">wrongfully jailed</a> people due to errors in Face Recognition models, and more recently Samsung had to restrict access to ChatGPT due to <a href="https://www.theverge.com/2023/5/2/23707796/samsung-ban-chatgpt-generative-ai-bing-bard-employees-security-concerns">leaked confidential information</a>.</p>
<p>AI providers are taking steps both to improve their data collection and the cases in which the technology can be used. OpenAI recently <a href="https://techcrunch.com/2023/03/01/addressing-criticism-openai-will-no-longer-use-customer-data-to-train-its-models-by-default/">changed</a> its policies to avoid collecting customers’ data for training by default, and multiple companies now <a href="https://www.washingtonpost.com/technology/2020/06/11/microsoft-facial-recognition/">restrict</a> their Face Detection models to avoid military and police uses. At the end of the day though, companies will always want more data to train their models and more users to buy them, so this is a constant struggle.&nbsp;</p>
</section>
<section id="lack-of-transparency-in-how-algorithms-work" class="level3">
<h3 class="anchored" data-anchor-id="lack-of-transparency-in-how-algorithms-work">Lack of Transparency in How Algorithms Work</h3>
<p>The mathematical aspect of AI, ranging from linear algebra to information theory and density functions, is another source of opacity when integrating AI with public policy workers. This issue is amplified in Neural Networks, the building block to the best generative models, since there’s no simple interpretation of the parameters the model is learning, resulting in black box systems that experts find hard to trust. Adding to the transparency issues, the traditional openness around Machine Learning models and techniques is partially being replaced by shallow reports and closed releases, due in part to the strong competition in commercial AI.</p>
<p><a href="https://arxiv.org/abs/2303.08774">GPT4 Technical Report</a> is an example of the current trend in AI development. While a few years back state-of-the-art models were shared publicly along with replication techniques, today most state-of-the-art models are kept private, and there’s <a href="https://www.technologyreview.com/2023/03/14/1069823/gpt-4-is-bigger-and-better-chatgpt-openai/">not enough information</a> shared to understand improvements and much less to try to replicate them. While some <a href="https://www.theverge.com/2023/3/15/23640180/openai-gpt-4-launch-closed-research-ilya-sutskever-interview">argue</a> that this is part of Responsible AI principles to avoid misuse, others <a href="https://www.nytimes.com/2023/05/18/technology/ai-meta-open-source.html">argue</a> that it’s mostly about protecting private interests.</p>
<p>Given the tradition of open research in AI, there has been pushback around the new closed tendencies, like Facebook’s non-commercial release of their <a href="https://research.facebook.com/publications/llama-open-and-efficient-foundation-language-models/">language models</a>. And on the model opacity, there’s continued <a href="https://arxiv.org/abs/1810.03993">research</a> around understanding how models work and impact different areas.</p>
</section>
<section id="models-are-not-perfect" class="level3">
<h3 class="anchored" data-anchor-id="models-are-not-perfect">Models are not perfect</h3>
<p>Most state-of-the-art AI models are probabilistic in nature, which means that they return the most likely answer, but there’s no strict enforcement on correctness, logic, or causality. Given the impressive results of Generative AI and the complexity behind it, it’s very easy for laypeople to misunderstand model results and use them in the wrong situations. To make matters worse, this complexity is often used by dishonest actors for their own personal gains.</p>
<p>Given the current capabilities of Language Models such as GPT4 and Bard, it’s easy to believe that they’re able to solve any task we ask. Memorizing large amounts of training data and being hyped by grifters does not help with the situation. However, multiple researchers have <a href="https://arxiv.org/pdf/2205.09712.pdf">shown</a> that the algorithms behind Language Models are unable to consistently solve multistep logical reasoning problems, for now.&nbsp;</p>
<p>Language Models continue improving, and they may be able to evolve logical and analytical capabilities in the near future, whether by growing in size, improving world models, or other techniques we don’t even know yet. However, it’s important to understand and communicate the <a href="https://www.noemamag.com/ai-and-the-limits-of-language/">limitations</a> of the current models we do have.</p>
</section>
<section id="no-standards-for-ai-regulation" class="level3">
<h3 class="anchored" data-anchor-id="no-standards-for-ai-regulation">No Standards for AI Regulation</h3>
<p>The growing complexity of Machine Learning and Generative algorithms, the quality jumps in model performance, the lack of technical knowledge in government, and the powerful actors involved are a brewing pot of issues for any attempt at regulation.&nbsp;</p>
<p>An example of the current regulatory status is the open discussion around AI Art. Tools like Stable Diffusion and Midjourney are incredible technologies that generate brand-new images in seconds, based on prompts made by users. These tools however are built using artists’ work and menace their monetizing abilities, since art with similar <a href="https://www.businessinsider.com/ai-image-generators-artists-copying-style-thousands-images-2022-10">characteristics</a> can be done in seconds. While artists have valid concerns, relying on copyright to address them may not be the best <a href="https://www.eff.org/deeplinks/2023/04/how-we-think-about-copyright-and-ai-art-0">answer</a>.&nbsp;</p>
<p>It seems like governments around the world are starting to understand Generative AI <a href="https://www.axios.com/2023/05/02/white-house-ai-leaders-ceos-meeting">risks and opportunities</a>, but there’s no clear path around regulation, and it’s important to note that some players may try to use it to stop competitors and maintain a <a href="https://www.reddit.com/r/MachineLearning/comments/13jhduh/n_sam_altman_ceo_of_openai_calls_for_us_to/">competitive advantage</a>.&nbsp;</p>
</section>
<section id="lack-of-well-defined-policy-goals" class="level3">
<h3 class="anchored" data-anchor-id="lack-of-well-defined-policy-goals">Lack of Well-Defined Policy Goals</h3>
<p>The Public Policy nature also contributes to the challenges around AI applications.The legal documents where public policy is supported are usually long, tangled, and full of legal terminology and technicalities. As any lawyer can confirm, words tend to have non-vernacular meanings and simple changes such as synonymous can significantly alter the legal meaning. Lastly, public policy is strongly connected to politics, where nuance and consensus are hard to find, and emotions are strong on either side of the aisle.&nbsp;&nbsp;&nbsp;</p>
<p>An example of this is bills, which propose changes to current statutes. As such, what may seem like a simple change in a letter or a number can provoke meaningful transformations in public society, such as changing the minimum wage from $10 to $19. <a href="https://app.pluralpolicy.com/legislative-tracking/bill/details/state-az-56th_1stregular-scr1023/1211945">Arizona SCR 1023</a> is a good example of how small changes can significantly affect the meaning of the law.</p>
<p>There have been efforts to improve model performance in specific fields, as in Google’s latest release of <a href="https://cloud.google.com/blog/topics/healthcare-life-sciences/sharing-google-med-palm-2-medical-large-language-model">med-palm 2</a>, and there’s even open source work around specialized <a href="https://aclanthology.org/2020.findings-emnlp.261/">legal models</a>. However, we need more targeted resources to work on the intersection of Public Policy and AI.</p>
</section>
<section id="uses-cases-that-hurt-democracy" class="level3">
<h3 class="anchored" data-anchor-id="uses-cases-that-hurt-democracy">Uses cases that hurt democracy</h3>
<p>While most of the risks we described are provoked by misunderstandings or incompetence, there’s a very important issue left. Clever actors who understand AI and Public Policy can use modern technology in ways that undermine democracy. Those actions can be as simple as misleading descriptive statistics or as complex as deep-fake political images and simulated grassroots movements.</p>
<p>Researchers at Stanford University <a href="https://hai.stanford.edu/news/ais-powers-political-persuasion">displayed</a> how GPT3 can be used to draft persuasive political messages. Similar models have been used to generate <a href="https://www.cnbc.com/2023/04/25/amazon-reviews-are-being-written-by-ai-chatbots.html">fake reviews</a> on Amazon and to cheat in high school homework, and they could be used just as easily to fake public interest in relevant policy topics or to draft bills with undemocratic objectives.&nbsp;</p>
<p>There’s a growing understanding in policy circles that this technology can affect public policy, and senators have publically interacted with some of the <a href="https://www.bloomberg.com/news/articles/2023-05-16/a-us-senator-just-used-chatgpt-for-opening-remarks-at-a-hearing#xj4y7vzkg">tools</a>. Even AI companies are <a href="https://openai.com/policies/usage-policies">limiting</a> the ways the models can be used in policy settings, but it’s not enough. This technology exists and is being used right now, and the Plural, Public, and Private sectors need to agree on the ways AI should not be used to affect public policy.</p>
</section>
</section>
<section id="the-biggest-challenge" class="level2">
<h2 class="anchored" data-anchor-id="the-biggest-challenge">The Biggest Challenge</h2>
<p>Public Policy impacts everyone, and there’s a real risk in how slowly government and public institutions will adapt and how fast will actors move and break things. We can see how unregulated new technology can <a href="https://www.bloomberg.com/features/2023-crypto-winter/">impact</a> the lives of thousands of people, and how sooner action could have prevented some of the harm.</p>
<p>Right now we need strong pressure from the public and grassroots organizations to accelerate government action and guarantee that corporate interests are aligned with the public benefit, like Google employees did with <a href="https://www.nytimes.com/2018/06/01/technology/google-pentagon-project-maven.html">Project Maven</a>, while maintaining incentives to continue research that improves the lives of the community.</p>
<p>While this article focuses on risks around ML and Generative AI, it’s also clear that the technology can be used to make the public policy process more accessible and democratic, as we argue in <a href="https://www.pluralpolicy.com/enview-blog/summarizing-bills-with-generative-ai">Summarizing Bills With Generative AI</a>.</p>


</section>

 ]]></description>
  <category>ai</category>
  <category>lm</category>
  <category>public policy</category>
  <guid>https://santiagomvc.github.io/posts/ai_risks_for_public_policy/ai_risks_for_public_policy.html</guid>
  <pubDate>Mon, 22 May 2023 05:00:00 GMT</pubDate>
  <media:content url="https://santiagomvc.github.io/posts/ai_risks_for_public_policy/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Summarizing Bills With Generative AI</title>
  <dc:creator>Santiago Velez</dc:creator>
  <link>https://santiagomvc.github.io/posts/summarizing_bills_with_genai/summarizing_bills_with_genai.html</link>
  <description><![CDATA[ 





<p><em>This is an old version of an article published in Plural’s blog. You can find the new version <a href="https://pluralpolicy.com/blog/summarizing-bills-with-generative-ai/">here</a>.</em></p>
<p>So far in 2023, thousands of bills have been introduced in jurisdictions across the country. The sooner people understand them, the sooner they can start advocating for what they care about. Since bills can be long and complex, it’s often helpful to have a summary of the changes the bill is proposing.&nbsp;</p>
<p>Let’s take <a href="https://app.pluralpolicy.com/legislative-tracking/bill/details/state-ar-2023-sb396/1180536">SB 396</a>:</p>
<p><em>“TO CREATE THE SOCIAL MEDIA SAFETY ACT; TO REQUIRE AGE VERIFICATION FOR USE OF SOCIAL MEDIA; AND TO CLARIFY LIABILITY FOR FAILURE TO PERFORM AGE VERIFICATION FOR USE OF SOCIAL MEDIA AND ILLEGAL RETENTION OF DATA.”</em>.</p>
<p>This bill, from Arkansas’s 2023 Session,&nbsp; regulates minors’ use of social media, like verifying users’ age and requiring minors to have parental consent. The bill is pages long with technical jargon and multiple textual changes. In this case, as for most Arkansas bills, the release does not include a legislature provided summary.</p>
<p>Given the advancements of Artificial Intelligence in language tasks, we believe Language Models can help us understand bills. Here’s an AI summary for SB 396:&nbsp;</p>
<p><em>“In SB 396, the bill proposes the creation of the Social Media Safety Act, which requires social media companies to verify the age of account holders, obtain parental consent for minors, and use reasonable age verification methods, which may include obtaining digitized identification or using other commercially reasonable age verification methods. The bill specifies that social media companies that knowingly violate the proposed act will be liable for damages resulting from a minor accessing a social media platform. The bill also outlines liability for commercial entities and third-party vendors related to the retention of identifying information after access to a social media platform has been granted.”</em></p>
<section id="summarizing-bill-texts" class="level2">
<h2 class="anchored" data-anchor-id="summarizing-bill-texts">Summarizing Bill Texts</h2>
<p>Language Models (LM) are specific generative models trained with big amounts of unstructured text data, with the goal of predicting the next word or the words adjacent inside the text corpus. With enough training data, number of parameters and computing power, these models can perform language tasks at human level and even maintain logical conversations. Language models are at the base of technologies such as ChatGPT, Bard, and others.</p>
<p>Given the current capabilities of LM and generative AI, we decided to try using it to summarize bills. There’s ample evidence of using LLM to summarize new articles, emails, contracts, and even short stories. Longer texts such as books still present a challenge. Given the success in other fields, we decided to analyze bill texts using common summarization techniques.&nbsp;</p>
<p>But it’s not a trivial task! Our first round of testing revealed some barriers and rough edges to this approach. Here are a few examples of our first round of AI generated summaries, with corresponding Policy Expert Evaluations:</p>
<table class="caption-top table">
<tbody>
<tr class="odd">
<td><strong>Bill Name </strong></td>
<td><strong>AI Model-Generated Summary</strong></td>
<td><strong>Policy Expert Evaluation</strong></td>
</tr>
<tr class="even">
<td><a href="https://app.pluralpolicy.com/legislative-tracking/bill/details/state-mn-2023_2024-sf13/1050240">SF 13</a>: Juneteenth (June 19) state holiday recognition - Minnesota 2023-2024 REGULAR SESSION</td>
<td>This bill recognizes Juneteenth, June 19th, as a state holiday and amends Minnesota Statutes 2022, sections 10.55 and 645.44, subdivision 5. It also requires the governor to issue a proclamation honoring the observance and recognizing the contributions African-Americans have made to Minnesota’s communities, culture, and economy. Additionally, public schools may offer instruction and programs on the occasion. The bill also states that when Juneteenth falls on a Sunday or Saturday, the following or preceding day shall be a holiday.</td>
<td>Capturing the main intent of the bill, establishing Juneteenth as a state holiday, is quite impressive given that this would be a difficult bill for a layperson to understand. However, the summary indicates that the bill creates new requirements for the governor to issue a proclamation and encourages public school instruction on Juneteenth. In this, the summary is incorrect as that text already existed in statute and is not newly added by this legislation.&nbsp;</td>
</tr>
<tr class="odd">
<td><a href="https://app.pluralpolicy.com/legislative-tracking/bill/details/state-mn-2023_2024-sf23/1129019">SF 23</a>: Conversion therapy prohibition establishment - Minnesota 2023-2024 REGULAR SESSION</td>
<td>This bill prohibits conversion therapy with children or vulnerable adults, prohibits medical assistance coverage for conversion therapy, and prohibits the misrepresentation of conversion therapy services or products. It defines conversion therapy as any practice by a mental health practitioner or professional that seeks to change an individual’s sexual orientation or gender identity, and prohibits the use of any fraud, false pretense, false promise, false guarantee, misrepresentation, false or misleading statements, or deceptive practice when advertising or offering conversion therapy services.</td>
<td>This summary does an excellent job of concisely summarizing the bills main actions and the details that really matter, like how these terms are defined.&nbsp;&nbsp;</td>
</tr>
<tr class="even">
<td><a href="https://app.pluralpolicy.com/legislative-tracking/bill/details/state-mn-2023_2024-sf15/1050263">SF 15</a>: Full Social Security benefit subtraction and public pension benefit subtraction establishment - Minnesota 2023-2024 REGULAR SESSION</td>
<td>This bill amends Minnesota Statutes 2022 to establish a public pension benefit subtraction for individual income taxation. It sets out the maximum subtraction and threshold amounts for married taxpayers filing a joint return, single or head-of-household taxpayers, and married taxpayers filing separate returns. It also defines provisional income, public pension exclusion, qualified benefits, and the maximum state exclusion. It also amends Minnesota Statutes 2022, section 290.091, subdivision 2, to define alternative minimum taxable income, investment interest, net minimum tax, regular tax, and tentative minimum tax. This section is effective for taxable years beginning after December 31, 2022.</td>
<td>The summary doesn’t include the bill’s proposed removal of the cap on social security income that a taxpayer can subtract, which is a huge part of the impact of the bill.&nbsp;The latter half of the summary, starting with “it also defines provisional”, is also inaccurate as the bill itself makes no changes to law here. The model is interpreting existing statute text as if it is what the bill is proposing.</td>
</tr>
</tbody>
</table>
<p>As you can see, while the model is able to summarize some bills successfully, there are other cases where the model confuses statute and bill text, giving an incorrect summary of the proposed bill.</p>
</section>
<section id="summarizing-bill-changes" class="level2">
<h2 class="anchored" data-anchor-id="summarizing-bill-changes">Summarizing Bill Changes</h2>
<p>Using AI and LM to summarize bills may be more complex than it seems. Since bills are mainly proposed changes to current statutes, if we pass the proposed text to a summarization model, it is often not able to differentiate between current and proposed law. However, if we pass only the changes in text, the model won’t have the necessary context to understand what the bill is proposing to change —&nbsp; for instance, modifying the minimum wage from $12 to $15 may be a single character change.</p>
<p>After additional research and help from our policy experts, we were able to find a combination of models and prompts that correctly identify most of the changes, with a better understanding of the current statutes and proposed law. Although it’s not perfect, the performance is significantly better.</p>
<table class="caption-top table">
<tbody>
<tr class="odd">
<td><strong>Bill Name</strong></td>
<td><strong>Model Summary</strong></td>
<td><strong>Policy Expert Evaluation</strong></td>
</tr>
<tr class="even">
<td><a href="https://app.pluralpolicy.com/legislative-tracking/bill/details/state-mn-2023_2024-sf13/1050240">SF 13</a>: Juneteenth (June 19) state holiday recognition - Minnesota 2023-2024 REGULAR SESSION</td>
<td>SF 13 proposes to amend Minnesota Statutes 2022, sections 10.55 and 645.44, subdivision 5, to recognize Juneteenth, June 19, as a state holiday in Minnesota. It specifies that Juneteenth is to be observed annually on the third Saturday in June and includes Juneteenth as a holiday in the definition of “Holiday” along with other nationally recognized holidays. The bill also mandates the governor to issue a proclamation honoring the observance and recognizing the contributions made by African-Americans to Minnesota’s communities, culture, and economy.</td>
<td>This is a really hard one to get, but it does a pretty good job. Ideally, it would indicate that the first section of the bill changes Juneteenth from being recognized on the third Saturday, to being recognized on June 19th.</td>
</tr>
<tr class="odd">
<td><a href="https://app.pluralpolicy.com/legislative-tracking/bill/details/state-mn-2023_2024-sf23/1129019">SF 23</a>: Conversion therapy prohibition establishment - Minnesota 2023-2024 REGULAR SESSION</td>
<td>The bill proposed in SF 23 aims to prohibit conversion therapy with minors and vulnerable adults, prohibit medical assistance coverage for conversion therapy, and prohibit the misrepresentation of conversion therapy services or products. It also proposes amending Minnesota Statutes to add a new law to protect individuals from conversion therapy and to add definitions for conversion therapy and related terms, as well as outlining penalties for those who engage in or advertise conversion therapy.</td>
<td>Very good again. 100% accurate.</td>
</tr>
<tr class="even">
<td><a href="https://app.pluralpolicy.com/legislative-tracking/bill/details/state-mn-2023_2024-sf15/1050263">SF 15</a>: Full Social Security benefit subtraction and public pension benefit subtraction establishment - Minnesota 2023-2024 REGULAR SESSION</td>
<td>SF 15 is proposing an amendment to Minnesota Statutes related to taxation and individual income. The bill proposes to establish a public pension benefit subtraction and make amendments to sections 290.0132 and 290.091 of the Minnesota Statutes.The bill would add a new subdivision 31 to section 290.0132 to establish a public pension income subtraction. The subtraction would be determined by the sum of the federal and state exclusions, with the maximum state exclusion being $5,450 for a joint return, half that amount for a married taxpayer filing a separate return, and $4,260 for all other taxpayers.The bill would also amend subdivision 26 of section 290.0132 related to Social Security benefits. It would allow a portion of taxable Social Security benefits received by a taxpayer in a taxable year as a subtraction. The maximum subtraction would be determined based on the taxpayer’s filing status and provisional income.Finally, the bill would amend subdivision 2 of section 290.091 related to the definitions of terms used in the tax imposed by that section.</td>
<td>This summarization is accurate and valuable. There are some things that are slightly incorrect — for example, in paragraph 3, it says “it would allow a portion of taxable social….”, when in fact the bill allows all social security taxes to be subtracted, not a portion.</td>
</tr>
</tbody>
</table>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>Despite improved performance, there are still hurdles to overcome. <a href="https://dl.acm.org/doi/10.1145/3442188.3445922">LMs can hallucinate, confidently share wrong answers, and even give biased responses</a>. LMs also have a hard time analyzing very long texts, so large omnibus bills may be out of the question for now. Finally, there’s a lot of room for improvement in the model and prompting area besides this experiment.</p>
<p>While limitations exist, it’s likely that LMs and Generative AI can support and improve policy analysis, as it has been shown in other text based fields. While this remains a hard problem, we’re committed to keep exploring the edges of the intersection between AI and Public Policy.</p>


</section>

 ]]></description>
  <category>ai</category>
  <category>lm</category>
  <category>public policy</category>
  <guid>https://santiagomvc.github.io/posts/summarizing_bills_with_genai/summarizing_bills_with_genai.html</guid>
  <pubDate>Thu, 20 Apr 2023 05:00:00 GMT</pubDate>
  <media:content url="https://santiagomvc.github.io/posts/summarizing_bills_with_genai/thumbnail.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
